
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000414  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800100  00800100  00000488  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000488  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e54  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000999  00000000  00000000  000013fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000617  00000000  00000000  00001d95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000023ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000518  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000516  00000000  00000000  00002a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ad 30       	cpi	r26, 0x0D	; 13
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cc 00 	call	0x198	; 0x198 <main>
  88:	0c 94 08 02 	jmp	0x410	; 0x410 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

volatile uint16_t      __ms = 0;
volatile unsigned long __lastTimerSeconds = 0; // Should atleast 136 years

ISR(TIMER0_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
	__ms++;
  a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
	if(__ms > 1000) { // All Functions every seconds
  b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  be:	89 3e       	cpi	r24, 0xE9	; 233
  c0:	93 40       	sbci	r25, 0x03	; 3
  c2:	e8 f0       	brcs	.+58     	; 0xfe <__vector_14+0x6e>
		__lastTimerSeconds++;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		__ms -= 1000;
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  f2:	88 5e       	subi	r24, 0xE8	; 232
  f4:	93 40       	sbci	r25, 0x03	; 3
  f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
		//updateRTC();
	}
	// Tutte le funzioni ogni milli secondo
}
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_17>:

extern uint32_t bufferDataToWrite;

ISR(SPI_STC_vect) // ISR SPI finito
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	switch(Sending) {
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	18 f0       	brcs	.+6      	; 0x142 <__vector_17+0x30>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	79 f0       	breq	.+30     	; 0x15e <__vector_17+0x4c>
 140:	18 c0       	rjmp	.+48     	; 0x172 <__vector_17+0x60>
		case 0:
		case 1:
		case 2: Sending = 0;
 142:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
		if(!Sending) {
 146:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 14a:	81 11       	cpse	r24, r1
 14c:	08 c0       	rjmp	.+16     	; 0x15e <__vector_17+0x4c>
			Sending = 3; 
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Sending>
			sendoverspi(&bufferDataToWrite, 8);
 154:	68 e0       	ldi	r22, 0x08	; 8
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 8d 01 	call	0x31a	; 0x31a <sendoverspi>
		} 
		case 3: bufferDataToWrite = 0; Sending = 0; // work in progress
 15e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bufferDataToWrite>
 162:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bufferDataToWrite+0x1>
 166:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <bufferDataToWrite+0x2>
 16a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <bufferDataToWrite+0x3>
 16e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
		;
	} 
	Sending = 0;
 172:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0f be       	out	0x3f, r0	; 63
 192:	0f 90       	pop	r0
 194:	1f 90       	pop	r1
 196:	18 95       	reti

00000198 <main>:

int main(void)
{
	// Enable Interrupts and configs
	(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
 198:	8f b7       	in	r24, 0x3f	; 63
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	8f bf       	out	0x3f, r24	; 63
	(*(volatile uint8_t*) (0x44)) |= (0b00000010); // Set the CTC mode
 19e:	84 b5       	in	r24, 0x24	; 36
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	84 bd       	out	0x24, r24	; 36
	(*(volatile uint8_t*) (0x45)) |= (0b00000011); // Set prescaler to 64
 1a4:	85 b5       	in	r24, 0x25	; 37
 1a6:	83 60       	ori	r24, 0x03	; 3
 1a8:	85 bd       	out	0x25, r24	; 37
	(*(volatile uint8_t*) (0x6E)) |= (0x02); // enable interrupts
 1aa:	ee e6       	ldi	r30, 0x6E	; 110
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	82 60       	ori	r24, 0x02	; 2
 1b2:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0x47)) |= (0xFA); // Set comparator to 250
 1b4:	87 b5       	in	r24, 0x27	; 39
 1b6:	8a 6f       	ori	r24, 0xFA	; 250
 1b8:	87 bd       	out	0x27, r24	; 39
	// Enable Interrupts and configs
	set_pin(ButtonUP, 5, INPUT, 0);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	65 e0       	ldi	r22, 0x05	; 5
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	8b e2       	ldi	r24, 0x2B	; 43
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	66 e0       	ldi	r22, 0x06	; 6
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	8b e2       	ldi	r24, 0x2B	; 43
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	set_pin(Speacker, 7, OUTPUT, 0);
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	41 e0       	ldi	r20, 0x01	; 1
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	8b e2       	ldi	r24, 0x2B	; 43
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	// enable Wireless
	startWireless();
 1ea:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <startWireless>
	// enable Wireless
	foo = 1;
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <foo+0x1>
 1f6:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <foo>
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <main+0x62>

000001fc <set_pin>:
extern volatile unsigned long __lastTimerSeconds; // Should atleast 136 years

volatile uint8_t Sending = 0;


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool INOUT) {
 1fc:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
 1fe:	dc 01       	movw	r26, r24
 200:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
 202:	44 23       	and	r20, r20
 204:	89 f0       	breq	.+34     	; 0x228 <set_pin+0x2c>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
 206:	3c 91       	ld	r19, X
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	06 2e       	mov	r0, r22
 20e:	02 c0       	rjmp	.+4      	; 0x214 <set_pin+0x18>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	0a 94       	dec	r0
 216:	e2 f7       	brpl	.-8      	; 0x210 <set_pin+0x14>
 218:	93 2f       	mov	r25, r19
 21a:	98 2b       	or	r25, r24
 21c:	9c 93       	st	X, r25
		(*(volatile uint8_t *)(PORT)) &= (255^(1 << PINNumb) ); // Pin Low
 21e:	90 81       	ld	r25, Z
 220:	80 95       	com	r24
 222:	89 23       	and	r24, r25
 224:	80 83       	st	Z, r24
 226:	0c c0       	rjmp	.+24     	; 0x240 <set_pin+0x44>
	} else (*(volatile uint8_t *)(DDR)) &= (0xFF^(1 << PINNumb)); // Pin input
 228:	3c 91       	ld	r19, X
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	06 2e       	mov	r0, r22
 230:	02 c0       	rjmp	.+4      	; 0x236 <set_pin+0x3a>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <set_pin+0x36>
 23a:	80 95       	com	r24
 23c:	83 23       	and	r24, r19
 23e:	8c 93       	st	X, r24
	if(INOUT) {
 240:	22 23       	and	r18, r18
 242:	69 f0       	breq	.+26     	; 0x25e <set_pin+0x62>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
 244:	8c 91       	ld	r24, X
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <set_pin+0x54>
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <set_pin+0x50>
 254:	82 2b       	or	r24, r18
 256:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
 258:	80 81       	ld	r24, Z
 25a:	28 2b       	or	r18, r24
 25c:	20 83       	st	Z, r18
 25e:	08 95       	ret

00000260 <toggle_pin>:
}

void toggle_pin(int PORT, int PINNumb) {
	int DDR = (PORT) - 0x01;
	// uint8_t* PIN = (PORT) - 0x02;
	if( ((*(volatile uint8_t*)(DDR)) & (1 << PINNumb)) == (1 << PINNumb) ) { // Pin output
 260:	fc 01       	movw	r30, r24
 262:	31 97       	sbiw	r30, 0x01	; 1
 264:	40 81       	ld	r20, Z
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <toggle_pin+0x10>
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <toggle_pin+0xc>
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	42 23       	and	r20, r18
 278:	53 23       	and	r21, r19
 27a:	24 17       	cp	r18, r20
 27c:	35 07       	cpc	r19, r21
 27e:	21 f4       	brne	.+8      	; 0x288 <toggle_pin+0x28>
		(*(volatile uint8_t*)(PORT)) ^= (1 << PINNumb); // Pin Toggled 
 280:	fc 01       	movw	r30, r24
 282:	30 81       	ld	r19, Z
 284:	23 27       	eor	r18, r19
 286:	20 83       	st	Z, r18
 288:	08 95       	ret

0000028a <start_SPI>:
	}
}

void start_SPI(int PORTMosi, int PORTMiso, int PORTSckl, _Bool MasterSlave, _Bool MSBLSBFirst, int clk, _Bool clkRisingFalling) {
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	ef 92       	push	r14
 292:	ff 92       	push	r15
 294:	0f 93       	push	r16
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	5c 01       	movw	r10, r24
 29c:	7b 01       	movw	r14, r22
 29e:	ea 01       	movw	r28, r20
	if(!MasterSlave) { // SPI as master
 2a0:	21 11       	cpse	r18, r1
 2a2:	2b c0       	rjmp	.+86     	; 0x2fa <start_SPI+0x70>
	set_pin(PORTSS,   2, OUTPUT, 0);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	85 e2       	ldi	r24, 0x25	; 37
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	set_pin(PORTMosi, 3, OUTPUT, 0);
 2b2:	20 e0       	ldi	r18, 0x00	; 0
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	c5 01       	movw	r24, r10
 2bc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	set_pin(PORTMiso, 4, INPUT,  0);
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	64 e0       	ldi	r22, 0x04	; 4
 2c6:	70 e0       	ldi	r23, 0x00	; 0
 2c8:	c7 01       	movw	r24, r14
 2ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	set_pin(PORTSckl, 5, OUTPUT, 0); }
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	65 e0       	ldi	r22, 0x05	; 5
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	ce 01       	movw	r24, r28
 2d8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
	SPCR = wRegister; 
 2dc:	82 ed       	ldi	r24, 0xD2	; 210
 2de:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
 2e0:	00 23       	and	r16, r16
 2e2:	21 f0       	breq	.+8      	; 0x2ec <start_SPI+0x62>
 2e4:	9c b5       	in	r25, 0x2c	; 44
 2e6:	80 e2       	ldi	r24, 0x20	; 32
 2e8:	89 27       	eor	r24, r25
 2ea:	8c bd       	out	0x2c, r24	; 44
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
 2ec:	cc 20       	and	r12, r12
 2ee:	61 f0       	breq	.+24     	; 0x308 <start_SPI+0x7e>
 2f0:	9c b5       	in	r25, 0x2c	; 44
 2f2:	88 e0       	ldi	r24, 0x08	; 8
 2f4:	89 27       	eor	r24, r25
 2f6:	8c bd       	out	0x2c, r24	; 44
}
 2f8:	07 c0       	rjmp	.+14     	; 0x308 <start_SPI+0x7e>
	if(!MasterSlave) { // SPI as master
	set_pin(PORTSS,   2, OUTPUT, 0);
	set_pin(PORTMosi, 3, OUTPUT, 0);
	set_pin(PORTMiso, 4, INPUT,  0);
	set_pin(PORTSckl, 5, OUTPUT, 0); }
	SPCR = wRegister; 
 2fa:	82 ed       	ldi	r24, 0xD2	; 210
 2fc:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
 2fe:	9c b5       	in	r25, 0x2c	; 44
 300:	80 e1       	ldi	r24, 0x10	; 16
 302:	89 27       	eor	r24, r25
 304:	8c bd       	out	0x2c, r24	; 44
 306:	ec cf       	rjmp	.-40     	; 0x2e0 <start_SPI+0x56>
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	0f 91       	pop	r16
 30e:	ff 90       	pop	r15
 310:	ef 90       	pop	r14
 312:	cf 90       	pop	r12
 314:	bf 90       	pop	r11
 316:	af 90       	pop	r10
 318:	08 95       	ret

0000031a <sendoverspi>:

_Bool sendoverspi(uint32_t* data, uint8_t size) {
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
 31e:	1f 92       	push	r1
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	if(size <= 8) {
 324:	69 30       	cpi	r22, 0x09	; 9
 326:	60 f4       	brcc	.+24     	; 0x340 <sendoverspi+0x26>
		char _cData = 0;
		memcpy(&_cData, data, 8);
 328:	28 e0       	ldi	r18, 0x08	; 8
 32a:	fc 01       	movw	r30, r24
 32c:	de 01       	movw	r26, r28
 32e:	11 96       	adiw	r26, 0x01	; 1
 330:	01 90       	ld	r0, Z+
 332:	0d 92       	st	X+, r0
 334:	2a 95       	dec	r18
 336:	e1 f7       	brne	.-8      	; 0x330 <sendoverspi+0x16>
		SPDR = _cData;
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	8e bd       	out	0x2e, r24	; 46
		return 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	01 c0       	rjmp	.+2      	; 0x342 <sendoverspi+0x28>
	} else { return 0;}
 340:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
 342:	0f 90       	pop	r0
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <wWrite_Register8>:
		Sending = 2; 
        sendoverspi(&bufferToSend, 8);
	} 
}

void wWrite_Register32(uint8_t hexadress, uint32_t datatowrite, uint8_t buflengh) {
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	00 d0       	rcall	.+0      	; 0x350 <wWrite_Register8+0x6>
 350:	00 d0       	rcall	.+0      	; 0x352 <wWrite_Register8+0x8>
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	89 83       	std	Y+1, r24	; 0x01
 35e:	9a 83       	std	Y+2, r25	; 0x02
 360:	ab 83       	std	Y+3, r26	; 0x03
 362:	bc 83       	std	Y+4, r27	; 0x04
 364:	86 2f       	mov	r24, r22
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	a0 e0       	ldi	r26, 0x00	; 0
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bufferDataToWrite>
 370:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <bufferDataToWrite+0x1>
 374:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <bufferDataToWrite+0x2>
 378:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <bufferDataToWrite+0x3>
 37c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 380:	81 11       	cpse	r24, r1
 382:	08 c0       	rjmp	.+16     	; 0x394 <wWrite_Register8+0x4a>
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Sending>
 38a:	68 e0       	ldi	r22, 0x08	; 8
 38c:	ce 01       	movw	r24, r28
 38e:	01 96       	adiw	r24, 0x01	; 1
 390:	0e 94 8d 01 	call	0x31a	; 0x31a <sendoverspi>
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <startWireless>:
	
}

void startWireless() {
 3a2:	cf 92       	push	r12
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	0f 93       	push	r16
	// Check Vari
	if(SPCR & (1<<SPE)) { // Spi enabled
 3aa:	0c b4       	in	r0, 0x2c	; 44
 3ac:	06 fe       	sbrs	r0, 6
 3ae:	1c c0       	rjmp	.+56     	; 0x3e8 <startWireless+0x46>
		if(SPCR == wRegister) { // SPi set as i wanna
 3b0:	8c b5       	in	r24, 0x2c	; 44
 3b2:	82 3d       	cpi	r24, 0xD2	; 210
 3b4:	31 f5       	brne	.+76     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			set_pin(WCSN, 0, OUTPUT, 1); // Il pin CSN deve essere impostato come output HIGH per un giusta transazione
 3b6:	21 e0       	ldi	r18, 0x01	; 1
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	70 e0       	ldi	r23, 0x00	; 0
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <set_pin>
			toggle_pin(WCSN, 0); // Necessario per avviare una transione nel chip.
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	85 e2       	ldi	r24, 0x25	; 37
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 30 01 	call	0x260	; 0x260 <toggle_pin>
			wWrite_Register8(0b01010000, 0b01110111);
 3d2:	67 e7       	ldi	r22, 0x77	; 119
 3d4:	80 e5       	ldi	r24, 0x50	; 80
 3d6:	0e 94 a5 01 	call	0x34a	; 0x34a <wWrite_Register8>
			toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip.
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	85 e2       	ldi	r24, 0x25	; 37
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 30 01 	call	0x260	; 0x260 <toggle_pin>
 3e6:	0d c0       	rjmp	.+26     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		}
	} else start_SPI(PMosi, PMiso, PSckl, 0, 0, 0, 0); startWireless();
 3e8:	c1 2c       	mov	r12, r1
 3ea:	e1 2c       	mov	r14, r1
 3ec:	f1 2c       	mov	r15, r1
 3ee:	00 e0       	ldi	r16, 0x00	; 0
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	45 e2       	ldi	r20, 0x25	; 37
 3f4:	50 e0       	ldi	r21, 0x00	; 0
 3f6:	65 e2       	ldi	r22, 0x25	; 37
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	85 e2       	ldi	r24, 0x25	; 37
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 45 01 	call	0x28a	; 0x28a <start_SPI>
 402:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <startWireless>
 406:	0f 91       	pop	r16
 408:	ff 90       	pop	r15
 40a:	ef 90       	pop	r14
 40c:	cf 90       	pop	r12
 40e:	08 95       	ret

00000410 <_exit>:
 410:	f8 94       	cli

00000412 <__stop_program>:
 412:	ff cf       	rjmp	.-2      	; 0x412 <__stop_program>
