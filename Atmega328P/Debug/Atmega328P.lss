
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  00800102  00800102  00000800  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000830  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000166e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b97  00000000  00000000  00001fee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a67  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000035ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  00003860  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000733  00000000  00000000  00003f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004674  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__ctors_end>
   4:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   8:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  10:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  14:	0c 94 af 02 	jmp	0x55e	; 0x55e <__vector_5>
  18:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  1c:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_7>
  20:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  24:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  28:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  2c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  30:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  34:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  3c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  40:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  44:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_17>
  48:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  4c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  50:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  54:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  58:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  5c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <__bad_interrupt>
  68:	00 03       	mulsu	r16, r16
  6a:	9c 03       	fmulsu	r17, r20
  6c:	9c 03       	fmulsu	r17, r20
  6e:	9c 03       	fmulsu	r17, r20
  70:	9c 03       	fmulsu	r17, r20
  72:	9c 03       	fmulsu	r17, r20
  74:	9c 03       	fmulsu	r17, r20
  76:	9c 03       	fmulsu	r17, r20
  78:	9c 03       	fmulsu	r17, r20
  7a:	9c 03       	fmulsu	r17, r20
  7c:	40 03       	mulsu	r20, r16
  7e:	9c 03       	fmulsu	r17, r20
  80:	9c 03       	fmulsu	r17, r20
  82:	9c 03       	fmulsu	r17, r20
  84:	9c 03       	fmulsu	r17, r20
  86:	9c 03       	fmulsu	r17, r20
  88:	9c 03       	fmulsu	r17, r20
  8a:	9c 03       	fmulsu	r17, r20
  8c:	9c 03       	fmulsu	r17, r20
  8e:	9c 03       	fmulsu	r17, r20
  90:	43 03       	mulsu	r20, r19
  92:	9c 03       	fmulsu	r17, r20
  94:	9c 03       	fmulsu	r17, r20
  96:	9c 03       	fmulsu	r17, r20
  98:	9c 03       	fmulsu	r17, r20
  9a:	9c 03       	fmulsu	r17, r20
  9c:	9c 03       	fmulsu	r17, r20
  9e:	9c 03       	fmulsu	r17, r20
  a0:	9c 03       	fmulsu	r17, r20
  a2:	9c 03       	fmulsu	r17, r20
  a4:	46 03       	mulsu	r20, r22
  a6:	9c 03       	fmulsu	r17, r20
  a8:	9c 03       	fmulsu	r17, r20
  aa:	9c 03       	fmulsu	r17, r20
  ac:	9c 03       	fmulsu	r17, r20
  ae:	9c 03       	fmulsu	r17, r20
  b0:	9c 03       	fmulsu	r17, r20
  b2:	9c 03       	fmulsu	r17, r20
  b4:	9c 03       	fmulsu	r17, r20
  b6:	9c 03       	fmulsu	r17, r20
  b8:	49 03       	fmul	r20, r17
  ba:	9c 03       	fmulsu	r17, r20
  bc:	9c 03       	fmulsu	r17, r20
  be:	9c 03       	fmulsu	r17, r20
  c0:	9c 03       	fmulsu	r17, r20
  c2:	9c 03       	fmulsu	r17, r20
  c4:	9c 03       	fmulsu	r17, r20
  c6:	9c 03       	fmulsu	r17, r20
  c8:	9c 03       	fmulsu	r17, r20
  ca:	9c 03       	fmulsu	r17, r20
  cc:	4c 03       	fmul	r20, r20
  ce:	9c 03       	fmulsu	r17, r20
  d0:	9c 03       	fmulsu	r17, r20
  d2:	9c 03       	fmulsu	r17, r20
  d4:	9c 03       	fmulsu	r17, r20
  d6:	9c 03       	fmulsu	r17, r20
  d8:	9c 03       	fmulsu	r17, r20
  da:	9c 03       	fmulsu	r17, r20
  dc:	9c 03       	fmulsu	r17, r20
  de:	9c 03       	fmulsu	r17, r20
  e0:	4f 03       	fmul	r20, r23
  e2:	9c 03       	fmulsu	r17, r20
  e4:	9c 03       	fmulsu	r17, r20
  e6:	9c 03       	fmulsu	r17, r20
  e8:	9c 03       	fmulsu	r17, r20
  ea:	9c 03       	fmulsu	r17, r20
  ec:	9c 03       	fmulsu	r17, r20
  ee:	9c 03       	fmulsu	r17, r20
  f0:	9c 03       	fmulsu	r17, r20
  f2:	9c 03       	fmulsu	r17, r20
  f4:	59 03       	fmul	r21, r17
  f6:	9c 03       	fmulsu	r17, r20
  f8:	9c 03       	fmulsu	r17, r20
  fa:	9c 03       	fmulsu	r17, r20
  fc:	9c 03       	fmulsu	r17, r20
  fe:	9c 03       	fmulsu	r17, r20
 100:	9c 03       	fmulsu	r17, r20
 102:	9c 03       	fmulsu	r17, r20
 104:	9c 03       	fmulsu	r17, r20
 106:	9c 03       	fmulsu	r17, r20
 108:	61 03       	mulsu	r22, r17
 10a:	0c 03       	fmul	r16, r20
 10c:	14 03       	mulsu	r17, r20
 10e:	1c 03       	fmul	r17, r20
 110:	24 03       	mulsu	r18, r20
 112:	2c 03       	fmul	r18, r20
 114:	34 03       	mulsu	r19, r20
 116:	3c 03       	fmul	r19, r20

00000118 <__ctors_end>:
 118:	11 24       	eor	r1, r1
 11a:	1f be       	out	0x3f, r1	; 63
 11c:	cf ef       	ldi	r28, 0xFF	; 255
 11e:	d8 e0       	ldi	r29, 0x08	; 8
 120:	de bf       	out	0x3e, r29	; 62
 122:	cd bf       	out	0x3d, r28	; 61

00000124 <__do_copy_data>:
 124:	11 e0       	ldi	r17, 0x01	; 1
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b1 e0       	ldi	r27, 0x01	; 1
 12a:	ea e6       	ldi	r30, 0x6A	; 106
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x10>
 130:	05 90       	lpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a2 30       	cpi	r26, 0x02	; 2
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0xc>

0000013a <__do_clear_bss>:
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	a2 e0       	ldi	r26, 0x02	; 2
 13e:	b1 e0       	ldi	r27, 0x01	; 1
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	aa 34       	cpi	r26, 0x4A	; 74
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	0e 94 ab 00 	call	0x156	; 0x156 <main>
 14e:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

00000152 <__bad_interrupt>:
 152:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000156 <main>:


int main(void)
{
	// User Custom Program
  set_pin(SensorePorta, 5, INPUT,  0);
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	65 e0       	ldi	r22, 0x05	; 5
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	8b e2       	ldi	r24, 0x2B	; 43
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 17 01 	call	0x22e	; 0x22e <set_pin>
  set_pin(LedPWM,       6, OUTPUT, 0);
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	66 e0       	ldi	r22, 0x06	; 6
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 17 01 	call	0x22e	; 0x22e <set_pin>
	// User Custom Program

  // Load Orario from EEPROM
  EEARH = 0x00; EEARL = 0x00;
 176:	12 bc       	out	0x22, r1	; 34
 178:	11 bc       	out	0x21, r1	; 33
  EECR = 0x00;
 17a:	1f ba       	out	0x1f, r1	; 31
  EECR |= (1 << EERIE) | (1 << EERE);
 17c:	8f b3       	in	r24, 0x1f	; 31
 17e:	89 60       	ori	r24, 0x09	; 9
 180:	8f bb       	out	0x1f, r24	; 31
  Orario.Secondi = EEDR;
 182:	80 b5       	in	r24, 0x20	; 32
 184:	e2 e0       	ldi	r30, 0x02	; 2
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	80 83       	st	Z, r24
  EEARH = 0x00; EEARL = 0x01;
 18a:	12 bc       	out	0x22, r1	; 34
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	21 bd       	out	0x21, r18	; 33
  EECR |= (1 << EERE);
 190:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Minuti = EEDR;
 192:	80 b5       	in	r24, 0x20	; 32
 194:	81 83       	std	Z+1, r24	; 0x01
  EEARH = 0x00; EEARL = 0x02;
 196:	12 bc       	out	0x22, r1	; 34
 198:	82 e0       	ldi	r24, 0x02	; 2
 19a:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
 19c:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Ore = EEDR;
 19e:	80 b5       	in	r24, 0x20	; 32
 1a0:	82 83       	std	Z+2, r24	; 0x02
  EEARH = 0x00; EEARL = 0x03;
 1a2:	12 bc       	out	0x22, r1	; 34
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
 1a8:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Giorno = EEDR;
 1aa:	80 b5       	in	r24, 0x20	; 32
 1ac:	83 83       	std	Z+3, r24	; 0x03
  EEARH = 0x00; EEARL = 0x04;
 1ae:	12 bc       	out	0x22, r1	; 34
 1b0:	84 e0       	ldi	r24, 0x04	; 4
 1b2:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
 1b4:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Mesi = EEDR;
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	84 83       	std	Z+4, r24	; 0x04
  EEARH = 0x00; EEARL = 0x05;
 1ba:	12 bc       	out	0x22, r1	; 34
 1bc:	85 e0       	ldi	r24, 0x05	; 5
 1be:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EEDR);
 1c0:	80 b5       	in	r24, 0x20	; 32
 1c2:	3f b3       	in	r19, 0x1f	; 31
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	ba 01       	movw	r22, r20
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0x7a>
 1cc:	66 0f       	add	r22, r22
 1ce:	77 1f       	adc	r23, r23
 1d0:	8a 95       	dec	r24
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <main+0x76>
 1d4:	cb 01       	movw	r24, r22
 1d6:	83 2b       	or	r24, r19
 1d8:	8f bb       	out	0x1f, r24	; 31
  EEARH = 0x00; EEARL = 0x00;
 1da:	12 bc       	out	0x22, r1	; 34
 1dc:	11 bc       	out	0x21, r1	; 33
  // Load Orario from EEPROM

  sei(); // Enable Interrupts
 1de:	78 94       	sei

	// PWM Led on PD6
  OCR0A = 0; // set PWM for 50% duty cycle
 1e0:	17 bc       	out	0x27, r1	; 39
  TCCR0A |= (1 << COM0A1); // set none-inverting mode
 1e2:	84 b5       	in	r24, 0x24	; 36
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << WGM01) | (1 << WGM00); // set fast PWM Mode
 1e8:	84 b5       	in	r24, 0x24	; 36
 1ea:	83 60       	ori	r24, 0x03	; 3
 1ec:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS01); // set prescaler to 8 and starts PWM
 1ee:	85 b5       	in	r24, 0x25	; 37
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	85 bd       	out	0x25, r24	; 37
  // PWM Led on PD6

	// INTERRUPT Porta PCINT21
  //(*PORTA(0x68)) = 0b00000100;
	PCICR   |= (1 << PCIE2);
 1f4:	e8 e6       	ldi	r30, 0x68	; 104
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	84 60       	ori	r24, 0x04	; 4
 1fc:	80 83       	st	Z, r24
	PCMSK2  |= (1 << 5);
 1fe:	ed e6       	ldi	r30, 0x6D	; 109
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 62       	ori	r24, 0x20	; 32
 206:	80 83       	st	Z, r24
	// INTERRUPT PORTA
   lastPIND = PIND;
 208:	89 b1       	in	r24, 0x09	; 9
 20a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <lastPIND>

  foo = 1;
 20e:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <foo+0x1>
 212:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <foo>
  tempTimerLed = 50; startLed = 1; // Accensione dei Led
 216:	82 e3       	ldi	r24, 0x32	; 50
 218:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempTimerLed>
 21c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <startLed>
  spiconfig sconfig = {SLAVE, MSBFIRST, DEFAULT, DEFAULT}; 
  start_SPI(sconfig);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 5e 01 	call	0x2bc	; 0x2bc <start_SPI>
 22c:	ff cf       	rjmp	.-2      	; 0x22c <main+0xd6>

0000022e <set_pin>:
	EEPROM_write(0x04, Orario.Mesi);
	EEPROM_write(0x05, Orario.Anno);
	// User Custom Program
}

void defineTimer(uint8_t TimerNumber, uint8_t Mode, uint8_t prescaler) {
 22e:	fc 01       	movw	r30, r24
 230:	dc 01       	movw	r26, r24
 232:	11 97       	sbiw	r26, 0x01	; 1
 234:	44 23       	and	r20, r20
 236:	89 f0       	breq	.+34     	; 0x25a <set_pin+0x2c>
 238:	3c 91       	ld	r19, X
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	06 2e       	mov	r0, r22
 240:	02 c0       	rjmp	.+4      	; 0x246 <set_pin+0x18>
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <set_pin+0x14>
 24a:	93 2f       	mov	r25, r19
 24c:	98 2b       	or	r25, r24
 24e:	9c 93       	st	X, r25
 250:	90 81       	ld	r25, Z
 252:	80 95       	com	r24
 254:	89 23       	and	r24, r25
 256:	80 83       	st	Z, r24
 258:	0c c0       	rjmp	.+24     	; 0x272 <set_pin+0x44>
 25a:	3c 91       	ld	r19, X
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	06 2e       	mov	r0, r22
 262:	02 c0       	rjmp	.+4      	; 0x268 <set_pin+0x3a>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	0a 94       	dec	r0
 26a:	e2 f7       	brpl	.-8      	; 0x264 <set_pin+0x36>
 26c:	80 95       	com	r24
 26e:	83 23       	and	r24, r19
 270:	8c 93       	st	X, r24
 272:	22 23       	and	r18, r18
 274:	69 f0       	breq	.+26     	; 0x290 <set_pin+0x62>
 276:	8c 91       	ld	r24, X
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <set_pin+0x54>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	6a 95       	dec	r22
 284:	e2 f7       	brpl	.-8      	; 0x27e <set_pin+0x50>
 286:	82 2b       	or	r24, r18
 288:	8c 93       	st	X, r24
 28a:	80 81       	ld	r24, Z
 28c:	28 2b       	or	r18, r24
 28e:	20 83       	st	Z, r18
 290:	08 95       	ret

00000292 <toggle_pin>:
 292:	fc 01       	movw	r30, r24
 294:	31 97       	sbiw	r30, 0x01	; 1
 296:	40 81       	ld	r20, Z
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <toggle_pin+0x10>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	6a 95       	dec	r22
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <toggle_pin+0xc>
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	42 23       	and	r20, r18
 2aa:	53 23       	and	r21, r19
 2ac:	24 17       	cp	r18, r20
 2ae:	35 07       	cpc	r19, r21
 2b0:	21 f4       	brne	.+8      	; 0x2ba <toggle_pin+0x28>
 2b2:	fc 01       	movw	r30, r24
 2b4:	30 81       	ld	r19, Z
 2b6:	23 27       	eor	r18, r19
 2b8:	20 83       	st	Z, r18
 2ba:	08 95       	ret

000002bc <start_SPI>:
 2bc:	61 11       	cpse	r22, r1
 2be:	0d c0       	rjmp	.+26     	; 0x2da <start_SPI+0x1e>
 2c0:	22 9a       	sbi	0x04, 2	; 4
 2c2:	2a 98       	cbi	0x05, 2	; 5
 2c4:	23 9a       	sbi	0x04, 3	; 4
 2c6:	2b 98       	cbi	0x05, 3	; 5
 2c8:	24 98       	cbi	0x04, 4	; 4
 2ca:	25 9a       	sbi	0x04, 5	; 4
 2cc:	2d 98       	cbi	0x05, 5	; 5
 2ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <SPIMode>
 2d2:	8c b5       	in	r24, 0x2c	; 44
 2d4:	81 60       	ori	r24, 0x01	; 1
 2d6:	8c bd       	out	0x2c, r24	; 44
 2d8:	0a c0       	rjmp	.+20     	; 0x2ee <start_SPI+0x32>
 2da:	22 98       	cbi	0x04, 2	; 4
 2dc:	24 9a       	sbi	0x04, 4	; 4
 2de:	2c 98       	cbi	0x05, 4	; 5
 2e0:	8c b5       	in	r24, 0x2c	; 44
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8c bd       	out	0x2c, r24	; 44
 2e6:	2c b5       	in	r18, 0x2c	; 44
 2e8:	80 e1       	ldi	r24, 0x10	; 16
 2ea:	82 27       	eor	r24, r18
 2ec:	8c bd       	out	0x2c, r24	; 44
 2ee:	77 23       	and	r23, r23
 2f0:	21 f0       	breq	.+8      	; 0x2fa <start_SPI+0x3e>
 2f2:	2c b5       	in	r18, 0x2c	; 44
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	82 27       	eor	r24, r18
 2f8:	8c bd       	out	0x2c, r24	; 44
 2fa:	99 23       	and	r25, r25
 2fc:	21 f0       	breq	.+8      	; 0x306 <start_SPI+0x4a>
 2fe:	9c b5       	in	r25, 0x2c	; 44
 300:	88 e0       	ldi	r24, 0x08	; 8
 302:	89 27       	eor	r24, r25
 304:	8c bd       	out	0x2c, r24	; 44
 306:	08 95       	ret

00000308 <sendoverspi>:
 308:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Sending>
 30c:	91 11       	cpse	r25, r1
 30e:	05 c0       	rjmp	.+10     	; 0x31a <sendoverspi+0x12>
 310:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Sending>
 314:	8e bd       	out	0x2e, r24	; 46
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	08 95       	ret
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret

0000031e <updateRTC>:
 31e:	e2 e0       	ldi	r30, 0x02	; 2
 320:	f1 e0       	ldi	r31, 0x01	; 1
 322:	80 81       	ld	r24, Z
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 83       	st	Z, r24
 328:	80 81       	ld	r24, Z
 32a:	8c 33       	cpi	r24, 0x3C	; 60
 32c:	a0 f1       	brcs	.+104    	; 0x396 <updateRTC+0x78>
 32e:	20 81       	ld	r18, Z
 330:	31 81       	ldd	r19, Z+1	; 0x01
 332:	89 e8       	ldi	r24, 0x89	; 137
 334:	28 9f       	mul	r18, r24
 336:	91 2d       	mov	r25, r1
 338:	11 24       	eor	r1, r1
 33a:	92 95       	swap	r25
 33c:	96 95       	lsr	r25
 33e:	97 70       	andi	r25, 0x07	; 7
 340:	93 0f       	add	r25, r19
 342:	91 83       	std	Z+1, r25	; 0x01
 344:	90 81       	ld	r25, Z
 346:	98 9f       	mul	r25, r24
 348:	81 2d       	mov	r24, r1
 34a:	11 24       	eor	r1, r1
 34c:	82 95       	swap	r24
 34e:	86 95       	lsr	r24
 350:	87 70       	andi	r24, 0x07	; 7
 352:	2c e3       	ldi	r18, 0x3C	; 60
 354:	82 9f       	mul	r24, r18
 356:	90 19       	sub	r25, r0
 358:	11 24       	eor	r1, r1
 35a:	90 83       	st	Z, r25
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	8c 33       	cpi	r24, 0x3C	; 60
 360:	d0 f0       	brcs	.+52     	; 0x396 <updateRTC+0x78>
 362:	91 81       	ldd	r25, Z+1	; 0x01
 364:	89 e8       	ldi	r24, 0x89	; 137
 366:	98 9f       	mul	r25, r24
 368:	91 2d       	mov	r25, r1
 36a:	11 24       	eor	r1, r1
 36c:	92 95       	swap	r25
 36e:	96 95       	lsr	r25
 370:	97 70       	andi	r25, 0x07	; 7
 372:	92 83       	std	Z+2, r25	; 0x02
 374:	91 81       	ldd	r25, Z+1	; 0x01
 376:	98 9f       	mul	r25, r24
 378:	81 2d       	mov	r24, r1
 37a:	11 24       	eor	r1, r1
 37c:	82 95       	swap	r24
 37e:	86 95       	lsr	r24
 380:	87 70       	andi	r24, 0x07	; 7
 382:	2c e3       	ldi	r18, 0x3C	; 60
 384:	82 9f       	mul	r24, r18
 386:	90 19       	sub	r25, r0
 388:	11 24       	eor	r1, r1
 38a:	91 83       	std	Z+1, r25	; 0x01
 38c:	82 81       	ldd	r24, Z+2	; 0x02
 38e:	88 31       	cpi	r24, 0x18	; 24
 390:	10 f0       	brcs	.+4      	; 0x396 <updateRTC+0x78>
 392:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 396:	08 95       	ret

00000398 <EEPROM_write>:

}

void EEPROM_write(uint8_t address, uint8_t data) {
	cli(); // Disable interrupts
 398:	f8 94       	cli
	while(EECR & (1 << EEPE)) {}
 39a:	f9 99       	sbic	0x1f, 1	; 31
 39c:	fe cf       	rjmp	.-4      	; 0x39a <EEPROM_write+0x2>
	EEARH = 0x00;
 39e:	12 bc       	out	0x22, r1	; 34
	EEARL = address;
 3a0:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
 3a2:	60 bd       	out	0x20, r22	; 32
	EECR = 0x00;
 3a4:	1f ba       	out	0x1f, r1	; 31
	EECR = (1 << EERIE) | (1 << EEMPE) | (1 << EEPE);
 3a6:	8e e0       	ldi	r24, 0x0E	; 14
 3a8:	8f bb       	out	0x1f, r24	; 31
 3aa:	84 e1       	ldi	r24, 0x14	; 20
 3ac:	81 50       	subi	r24, 0x01	; 1
	for(uint8_t i = 20; i != 0; i--) {} // Delay farlocco per evitare problemi con EEPROM
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <EEPROM_write+0x14>
	sei(); // Enable interrupts
 3b0:	78 94       	sei
 3b2:	08 95       	ret

000003b4 <updateEEPROM>:
			}
		}
}
// Orologio - Orario

void updateEEPROM() {
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
	// User Custom Program
	EEPROM_write(0x00, Orario.Secondi);
 3b8:	c2 e0       	ldi	r28, 0x02	; 2
 3ba:	d1 e0       	ldi	r29, 0x01	; 1
 3bc:	68 81       	ld	r22, Y
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	EEPROM_write(0x01, Orario.Minuti);
 3c4:	69 81       	ldd	r22, Y+1	; 0x01
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	EEPROM_write(0x02, Orario.Ore);
 3cc:	6a 81       	ldd	r22, Y+2	; 0x02
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	EEPROM_write(0x03, Orario.Giorno);
 3d4:	6b 81       	ldd	r22, Y+3	; 0x03
 3d6:	83 e0       	ldi	r24, 0x03	; 3
 3d8:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	EEPROM_write(0x04, Orario.Mesi);
 3dc:	6c 81       	ldd	r22, Y+4	; 0x04
 3de:	84 e0       	ldi	r24, 0x04	; 4
 3e0:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	EEPROM_write(0x05, Orario.Anno);
 3e4:	6d 81       	ldd	r22, Y+5	; 0x05
 3e6:	85 e0       	ldi	r24, 0x05	; 5
 3e8:	0e 94 cc 01 	call	0x398	; 0x398 <EEPROM_write>
	// User Custom Program
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <__vector_7>:
	(*(volatile uint8_t*) (0xB3)) |= (0xFA); // Set comparator to 250
	// Counter Millisecondi Timer 2
}

ISR(TIMER2_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	4f 93       	push	r20
 402:	5f 93       	push	r21
 404:	6f 93       	push	r22
 406:	7f 93       	push	r23
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	af 93       	push	r26
 40e:	bf 93       	push	r27
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
  __ms++;
 414:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__ms>
 418:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__ms+0x1>
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__ms+0x1>
 422:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__ms>
  if(__ms >= 1000) { // One second passed
 426:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__ms>
 42a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__ms+0x1>
 42e:	88 3e       	cpi	r24, 0xE8	; 232
 430:	93 40       	sbci	r25, 0x03	; 3
 432:	a0 f1       	brcs	.+104    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
    __ms -= 1000;
 434:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__ms>
 438:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__ms+0x1>
 43c:	88 5e       	subi	r24, 0xE8	; 232
 43e:	93 40       	sbci	r25, 0x03	; 3
 440:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__ms+0x1>
 444:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__ms>
    __lastTimerSeconds++;
 448:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__lastTimerSeconds>
 44c:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__lastTimerSeconds+0x1>
 450:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <__lastTimerSeconds+0x2>
 454:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <__lastTimerSeconds+0x3>
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
 45e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__lastTimerSeconds>
 462:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__lastTimerSeconds+0x1>
 466:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <__lastTimerSeconds+0x2>
 46a:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <__lastTimerSeconds+0x3>
    if(!lastTimerLedOn) lastTimerLedOn++;
 46e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Timer8+0x1>
 472:	81 11       	cpse	r24, r1
 474:	05 c0       	rjmp	.+10     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 476:	e0 e4       	ldi	r30, 0x40	; 64
 478:	f1 e0       	ldi	r31, 0x01	; 1
 47a:	81 81       	ldd	r24, Z+1	; 0x01
 47c:	8f 5f       	subi	r24, 0xFF	; 255
 47e:	81 83       	std	Z+1, r24	; 0x01
		refreshEEPROM++; if(refreshEEPROM >= 250) refreshEEPROM = 0; updateEEPROM();
 480:	e0 e4       	ldi	r30, 0x40	; 64
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	82 81       	ldd	r24, Z+2	; 0x02
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	82 83       	std	Z+2, r24	; 0x02
 48a:	82 81       	ldd	r24, Z+2	; 0x02
 48c:	8a 3f       	cpi	r24, 0xFA	; 250
 48e:	10 f0       	brcs	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <Timer8+0x2>
 494:	0e 94 da 01 	call	0x3b4	; 0x3b4 <updateEEPROM>
    updateRTC();
 498:	0e 94 8f 01 	call	0x31e	; 0x31e <updateRTC>
  }
  if(startLed) {
 49c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <startLed>
 4a0:	88 23       	and	r24, r24
 4a2:	e9 f1       	breq	.+122    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
      delayTimerPWM++;
 4a4:	e0 e4       	ldi	r30, 0x40	; 64
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	80 81       	ld	r24, Z
 4aa:	8f 5f       	subi	r24, 0xFF	; 255
 4ac:	80 83       	st	Z, r24
      if(delayTimerPWM >= tempTimerLed) {
 4ae:	90 81       	ld	r25, Z
 4b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tempTimerLed>
 4b4:	98 17       	cp	r25, r24
 4b6:	08 f4       	brcc	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b8:	41 c0       	rjmp	.+130    	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        delayTimerPWM = 0;
 4ba:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <Timer8>
        OCR0A = ( Reverse ? (OCR0A + 3) : (OCR0A - 3) );
 4be:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Reverse>
 4c2:	88 23       	and	r24, r24
 4c4:	19 f0       	breq	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c6:	87 b5       	in	r24, 0x27	; 39
 4c8:	8d 5f       	subi	r24, 0xFD	; 253
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	87 b5       	in	r24, 0x27	; 39
 4ce:	83 50       	subi	r24, 0x03	; 3
 4d0:	87 bd       	out	0x27, r24	; 39
        Ocrlast = OCR0A;
 4d2:	87 b5       	in	r24, 0x27	; 39
 4d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <Ocrlast>
        if(Ocrlast >= 240 && Reverse == 0) { // 225 viene scelto per evitare l'overflow, con valore massimo 255
 4d8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Ocrlast>
 4dc:	80 3f       	cpi	r24, 0xF0	; 240
 4de:	70 f0       	brcs	.+28     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
 4e0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Reverse>
 4e4:	81 11       	cpse	r24, r1
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
          startLed = 0; Reverse = 1;
 4e8:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <startLed>
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Reverse>
          lastTimerLedOn = 1;
 4f2:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <Timer8+0x1>
          LedOn = 1;
 4f6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <LedOn>
 4fa:	20 c0       	rjmp	.+64     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        } else if(Ocrlast <= 20 && Reverse == 1) {
 4fc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Ocrlast>
 500:	85 31       	cpi	r24, 0x15	; 21
 502:	e0 f4       	brcc	.+56     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 504:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Reverse>
 508:	88 23       	and	r24, r24
 50a:	c1 f0       	breq	.+48     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
          startLed = 0; Reverse = 0; LedOn = 0; lastTimerLedOn = 0;
 50c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <startLed>
 510:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Reverse>
 514:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <LedOn>
 518:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <Timer8+0x1>
 51c:	0f c0       	rjmp	.+30     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
        }
      }
  } else {
    if(lastTimerLedOn >= MAXTIMELED && StatusPorta == 0) {
 51e:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <Timer8+0x1>
 522:	84 31       	cpi	r24, 0x14	; 20
 524:	58 f0       	brcs	.+22     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
 526:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <StatusPorta>
 52a:	81 11       	cpse	r24, r1
 52c:	07 c0       	rjmp	.+14     	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
      lastTimerLedOn = 0; startLed = 1; Reverse = 1;
 52e:	10 92 41 01 	sts	0x0141, r1	; 0x800141 <Timer8+0x1>
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <startLed>
 538:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Reverse>
    }
  }
}
 53c:	ff 91       	pop	r31
 53e:	ef 91       	pop	r30
 540:	bf 91       	pop	r27
 542:	af 91       	pop	r26
 544:	9f 91       	pop	r25
 546:	8f 91       	pop	r24
 548:	7f 91       	pop	r23
 54a:	6f 91       	pop	r22
 54c:	5f 91       	pop	r21
 54e:	4f 91       	pop	r20
 550:	3f 91       	pop	r19
 552:	2f 91       	pop	r18
 554:	0f 90       	pop	r0
 556:	0f be       	out	0x3f, r0	; 63
 558:	0f 90       	pop	r0
 55a:	1f 90       	pop	r1
 55c:	18 95       	reti

0000055e <__vector_5>:

volatile uint8_t lastPIND = 0x00;

ISR(PCINT2_vect) { // INTERRUPT PCINT2
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	2f 93       	push	r18
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	uint8_t changedBits = 0x00;
	changedBits = PIND ^ lastPIND; // changedBits ti dice se e quale porta sia cambiata
 56e:	99 b1       	in	r25, 0x09	; 9
 570:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lastPIND>
	lastPIND = PIND; // aggiorna variabile lastPIND
 574:	29 b1       	in	r18, 0x09	; 9
 576:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <lastPIND>

	if(changedBits & (1 << 5)) { // Cambiato pin 5
 57a:	89 27       	eor	r24, r25
 57c:	85 ff       	sbrs	r24, 5
 57e:	11 c0       	rjmp	.+34     	; 0x5a2 <__vector_5+0x44>
		if(PIND & ( 1 << 5)) { // Pin 5 is HIGH
 580:	4d 9b       	sbis	0x09, 5	; 9
 582:	0d c0       	rjmp	.+26     	; 0x59e <__vector_5+0x40>
			StatusPorta = APERTA;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <StatusPorta>
			if(!LedOn == 0) startLed = 1; Reverse = 0;
 58a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <LedOn>
 58e:	88 23       	and	r24, r24
 590:	19 f0       	breq	.+6      	; 0x598 <__vector_5+0x3a>
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <startLed>
 598:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Reverse>
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <__vector_5+0x44>
		} else { // Pin 5 is LOW
			StatusPorta = CHIUSA;
 59e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <StatusPorta>
			//
		}
	}
}
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti

000005b2 <__vector_17>:

ISR(SPI_STC_vect) // ISR SPI finito
{
 5b2:	1f 92       	push	r1
 5b4:	0f 92       	push	r0
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	0f 92       	push	r0
 5ba:	11 24       	eor	r1, r1
 5bc:	2f 93       	push	r18
 5be:	3f 93       	push	r19
 5c0:	4f 93       	push	r20
 5c2:	5f 93       	push	r21
 5c4:	6f 93       	push	r22
 5c6:	7f 93       	push	r23
 5c8:	8f 93       	push	r24
 5ca:	9f 93       	push	r25
 5cc:	af 93       	push	r26
 5ce:	bf 93       	push	r27
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
	if(SPIMode == SLAVE) {
 5d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SPIMode>
 5d8:	88 23       	and	r24, r24
 5da:	09 f4       	brne	.+2      	; 0x5de <__vector_17+0x2c>
 5dc:	8d c0       	rjmp	.+282    	; 0x6f8 <__vector_17+0x146>
		if(Sending == 0) {
 5de:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Sending>
 5e2:	81 11       	cpse	r24, r1
 5e4:	86 c0       	rjmp	.+268    	; 0x6f2 <__vector_17+0x140>
			// Read SPDR
			switch(SPDR) {
 5e6:	ee b5       	in	r30, 0x2e	; 46
 5e8:	8e 2f       	mov	r24, r30
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	fc 01       	movw	r30, r24
 5ee:	3a 97       	sbiw	r30, 0x0a	; 10
 5f0:	e1 35       	cpi	r30, 0x51	; 81
 5f2:	f1 05       	cpc	r31, r1
 5f4:	08 f0       	brcs	.+2      	; 0x5f8 <__vector_17+0x46>
 5f6:	a0 c0       	rjmp	.+320    	; 0x738 <__vector_17+0x186>
 5f8:	ec 5c       	subi	r30, 0xCC	; 204
 5fa:	ff 4f       	sbci	r31, 0xFF	; 255
 5fc:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__tablejump2__>
				case 10: // Richiesta Orario
					switch(RichiestaOrario) {
 600:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <RichiestaOrario>
 604:	8e 2f       	mov	r24, r30
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	87 30       	cpi	r24, 0x07	; 7
 60a:	91 05       	cpc	r25, r1
 60c:	c8 f5       	brcc	.+114    	; 0x680 <__vector_17+0xce>
 60e:	fc 01       	movw	r30, r24
 610:	eb 57       	subi	r30, 0x7B	; 123
 612:	ff 4f       	sbci	r31, 0xFF	; 255
 614:	0c 94 ad 03 	jmp	0x75a	; 0x75a <__tablejump2__>
						case 0: RichiestaOrario++; SPDR = Orario.Secondi;
 618:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 622:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 626:	8e bd       	out	0x2e, r24	; 46
						case 1: RichiestaOrario++; SPDR = Orario.Minuti;
 628:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 632:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__data_end+0x1>
 636:	8e bd       	out	0x2e, r24	; 46
						case 2: RichiestaOrario++; SPDR = Orario.Ore;
 638:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 63c:	8f 5f       	subi	r24, 0xFF	; 255
 63e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 642:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
 646:	8e bd       	out	0x2e, r24	; 46
						case 3: RichiestaOrario++; SPDR = Orario.Giorno;
 648:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 64c:	8f 5f       	subi	r24, 0xFF	; 255
 64e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 652:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__data_end+0x3>
 656:	8e bd       	out	0x2e, r24	; 46
						case 4: RichiestaOrario++; SPDR = Orario.Mesi;
 658:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 662:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end+0x4>
 666:	8e bd       	out	0x2e, r24	; 46
						case 5: RichiestaOrario++; SPDR = Orario.Anno;
 668:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <RichiestaOrario>
 66c:	8f 5f       	subi	r24, 0xFF	; 255
 66e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <RichiestaOrario>
 672:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <__data_end+0x5>
 676:	8e bd       	out	0x2e, r24	; 46
						case 6: RichiestaOrario = 0; SPDR = ACK;
 678:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <RichiestaOrario>
 67c:	8e e7       	ldi	r24, 0x7E	; 126
 67e:	8e bd       	out	0x2e, r24	; 46
					;}
				case 20: // Stato Porta
					SPDR = StatusPorta ? 0x01 : 0x00;
 680:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <StatusPorta>
 684:	8e bd       	out	0x2e, r24	; 46
				case 30: // Valore Sensore Umidità
					SPDR = SensoreUmidita;
 686:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <SensoreUmidita>
 68a:	8e bd       	out	0x2e, r24	; 46
				case 40: // Valore Sensore Temperatura
					SPDR = SensoreTemperatura;
 68c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <SensoreTemperatura>
 690:	8e bd       	out	0x2e, r24	; 46
				case 50: // Stato Ventola
					SPDR = VentolaONOFF ? 0x01 : 0x00;
 692:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <VentolaONOFF>
 696:	8e bd       	out	0x2e, r24	; 46
				case 60: // Modifica Stato Ventola in 1
					VentolaONOFF = HIGH;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <VentolaONOFF>
				case 70: // Modifica Stato Led in FULLON
					OCR0A = 255; startLed = 0; Reverse = 1; tempTimerLed = 25;
 69e:	8f ef       	ldi	r24, 0xFF	; 255
 6a0:	87 bd       	out	0x27, r24	; 39
 6a2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <startLed>
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Reverse>
 6ac:	89 e1       	ldi	r24, 0x19	; 25
 6ae:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempTimerLed>
				case 80: // Modifica Stato Led in FULLOFF
					OCR0A = 0; 	 startLed = 0; Reverse = 0; tempTimerLed = 25;
 6b2:	17 bc       	out	0x27, r1	; 39
 6b4:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <startLed>
 6b8:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Reverse>
 6bc:	89 e1       	ldi	r24, 0x19	; 25
 6be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempTimerLed>
				case 90: // Doppio Transfer -> Avvio Procedura Led con tempTimerLed
					if(!_bufferStatusSPI) { _bufferStatusSPI = 1;}
 6c2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_bufferStatusSPI>
 6c6:	81 11       	cpse	r24, r1
 6c8:	04 c0       	rjmp	.+8      	; 0x6d2 <__vector_17+0x120>
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <_bufferStatusSPI>
 6d0:	33 c0       	rjmp	.+102    	; 0x738 <__vector_17+0x186>
					else if(_bufferStatusSPI) { _bufferStatusSPI = 0; OCR0A = 0; tempTimerLed = SPDR; startLed = 1; Reverse = 0;}
 6d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <_bufferStatusSPI>
 6d6:	88 23       	and	r24, r24
 6d8:	79 f1       	breq	.+94     	; 0x738 <__vector_17+0x186>
 6da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <_bufferStatusSPI>
 6de:	17 bc       	out	0x27, r1	; 39
 6e0:	8e b5       	in	r24, 0x2e	; 46
 6e2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempTimerLed>
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <startLed>
 6ec:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <Reverse>
 6f0:	23 c0       	rjmp	.+70     	; 0x738 <__vector_17+0x186>
			;}
		} else if (Sending == 1) {
 6f2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Sending>
 6f6:	20 c0       	rjmp	.+64     	; 0x738 <__vector_17+0x186>
			// Write SPDR
		}
	} else if(SPIMode == MASTER) {
 6f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <SPIMode>
 6fc:	81 11       	cpse	r24, r1
 6fe:	1c c0       	rjmp	.+56     	; 0x738 <__vector_17+0x186>
		switch(Sending) {
 700:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Sending>
 704:	83 30       	cpi	r24, 0x03	; 3
 706:	18 f0       	brcs	.+6      	; 0x70e <__vector_17+0x15c>
 708:	83 30       	cpi	r24, 0x03	; 3
 70a:	51 f0       	breq	.+20     	; 0x720 <__vector_17+0x16e>
 70c:	13 c0       	rjmp	.+38     	; 0x734 <__vector_17+0x182>
			case 0:
			case 1:
			case 2:
				if(!bufferSize) { // 32 bit
 70e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <bufferSize>
 712:	88 23       	and	r24, r24
 714:	29 f0       	breq	.+10     	; 0x720 <__vector_17+0x16e>

				} else { // 8 bit
					sendoverspi(bufferDataToWrite, 3);
 716:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <bufferDataToWrite>
 71a:	63 e0       	ldi	r22, 0x03	; 3
 71c:	0e 94 84 01 	call	0x308	; 0x308 <sendoverspi>
				}
			case 3: bufferDataToWrite = 0; Sending = 0; toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip. // work in progress
 720:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <bufferDataToWrite>
 724:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Sending>
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	85 e2       	ldi	r24, 0x25	; 37
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 94 49 01 	call	0x292	; 0x292 <toggle_pin>
		;}
		Sending = 0;
 734:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Sending>
	}
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	bf 91       	pop	r27
 73e:	af 91       	pop	r26
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	7f 91       	pop	r23
 746:	6f 91       	pop	r22
 748:	5f 91       	pop	r21
 74a:	4f 91       	pop	r20
 74c:	3f 91       	pop	r19
 74e:	2f 91       	pop	r18
 750:	0f 90       	pop	r0
 752:	0f be       	out	0x3f, r0	; 63
 754:	0f 90       	pop	r0
 756:	1f 90       	pop	r1
 758:	18 95       	reti

0000075a <__tablejump2__>:
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	05 90       	lpm	r0, Z+
 760:	f4 91       	lpm	r31, Z
 762:	e0 2d       	mov	r30, r0
 764:	09 94       	ijmp

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
