
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ff  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  000009fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028a  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009b  00000000  00000000  00001738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000017d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define INPUT 0
#define OUTPUT 1

int main(void)
{
	set_pin(ButtonUP, 5, INPUT, 0);
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	65 e0       	ldi	r22, 0x05	; 5
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	8b e0       	ldi	r24, 0x0B	; 11
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 51 00 	call	0xa2	; 0xa2 <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	66 e0       	ldi	r22, 0x06	; 6
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	8b e0       	ldi	r24, 0x0B	; 11
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 51 00 	call	0xa2	; 0xa2 <set_pin>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x20>

000000a2 <set_pin>:
 */ 

#include "functions.h"


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool INOUT) {
  a2:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
  a4:	dc 01       	movw	r26, r24
  a6:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
  a8:	44 23       	and	r20, r20
  aa:	71 f0       	breq	.+28     	; 0xc8 <set_pin+0x26>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
  ac:	3c 91       	ld	r19, X
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	06 2e       	mov	r0, r22
  b4:	02 c0       	rjmp	.+4      	; 0xba <set_pin+0x18>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <set_pin+0x14>
  be:	83 2b       	or	r24, r19
  c0:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (0 << PINNumb); // Pin Low
  c2:	80 81       	ld	r24, Z
  c4:	80 83       	st	Z, r24
  c6:	02 c0       	rjmp	.+4      	; 0xcc <set_pin+0x2a>
	} else (*(volatile uint8_t *)(DDR)) |= (0 << PINNumb); // Pin input
  c8:	8c 91       	ld	r24, X
  ca:	8c 93       	st	X, r24
	if(INOUT) {
  cc:	22 23       	and	r18, r18
  ce:	69 f0       	breq	.+26     	; 0xea <set_pin+0x48>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
  d0:	8c 91       	ld	r24, X
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <set_pin+0x3a>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <set_pin+0x36>
  e0:	82 2b       	or	r24, r18
  e2:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
  e4:	80 81       	ld	r24, Z
  e6:	28 2b       	or	r18, r24
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
