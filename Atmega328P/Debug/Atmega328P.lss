
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8f  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000886  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000431  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00001bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  00001cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000334  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000024bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  88:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

volatile uint16_t __ms = 0;
volatile unsigned long __lastTimerSeconds = 0; // Should atleast 136 years

ISR(TIMER0_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	__ms++;
  b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
	if(__ms > 1000) { // All Functions every seconds
  c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  cc:	89 3e       	cpi	r24, 0xE9	; 233
  ce:	93 40       	sbci	r25, 0x03	; 3
  d0:	f8 f0       	brcs	.+62     	; 0x110 <__vector_14+0x80>
		__lastTimerSeconds++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  de:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	a1 1d       	adc	r26, r1
  e6:	b1 1d       	adc	r27, r1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  f4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		__ms -= 1000;
  f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
 100:	88 5e       	subi	r24, 0xE8	; 232
 102:	93 40       	sbci	r25, 0x03	; 3
 104:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
		updateRTC();
 10c:	0e 94 05 01 	call	0x20a	; 0x20a <updateRTC>
	}
	// Tutte le funzioni ogni milli secondo
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_17>:

ISR(SPI_STC_vect) // ISR SPI finito
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
	switch(Sending) {
		case 0:
		case 1:
		;
	}
}
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:

int main(void)
{
	// Enable Interrupts and configs
	(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
 146:	8f b7       	in	r24, 0x3f	; 63
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	8f bf       	out	0x3f, r24	; 63
	(*(volatile uint8_t*) (0x44)) |= (0b00000010); // Set the CTC mode
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
	(*(volatile uint8_t*) (0x45)) |= (0b00000011); // Set prescaler to 64
 152:	85 b5       	in	r24, 0x25	; 37
 154:	83 60       	ori	r24, 0x03	; 3
 156:	85 bd       	out	0x25, r24	; 37
	(*(volatile uint8_t*) (0x6E)) |= (0x02); // enable interrupts
 158:	ee e6       	ldi	r30, 0x6E	; 110
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0x47)) |= (0xFA); // Set comparator to 250
 162:	87 b5       	in	r24, 0x27	; 39
 164:	8a 6f       	ori	r24, 0xFA	; 250
 166:	87 bd       	out	0x27, r24	; 39
	// Enable Interrupts and configs
	set_pin(ButtonUP, 5, INPUT, 0);
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	65 e0       	ldi	r22, 0x05	; 5
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	8b e2       	ldi	r24, 0x2B	; 43
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	8b e2       	ldi	r24, 0x2B	; 43
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <set_pin>
	set_pin(Speacker, 7, OUTPUT, 0);
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	67 e0       	ldi	r22, 0x07	; 7
 18e:	70 e0       	ldi	r23, 0x00	; 0
 190:	8b e2       	ldi	r24, 0x2B	; 43
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <set_pin>
	// enable Wireless
	
	// enable Wireless
	foo = 1;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <foo+0x1>
 1a0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <foo>
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <main+0x5e>

000001a6 <set_pin>:
	if(clkRisingFalling) fool ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}

void sendoverspi(uint32_t* data, uint8_t size) {
	if (Sending) { return; }
	Sending = 1; 
 1a6:	fc 01       	movw	r30, r24
 1a8:	dc 01       	movw	r26, r24
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	44 23       	and	r20, r20
 1ae:	89 f0       	breq	.+34     	; 0x1d2 <set_pin+0x2c>
 1b0:	3c 91       	ld	r19, X
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	06 2e       	mov	r0, r22
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <set_pin+0x18>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <set_pin+0x14>
 1c2:	93 2f       	mov	r25, r19
 1c4:	98 2b       	or	r25, r24
 1c6:	9c 93       	st	X, r25
 1c8:	90 81       	ld	r25, Z
 1ca:	80 95       	com	r24
 1cc:	89 23       	and	r24, r25
 1ce:	80 83       	st	Z, r24
 1d0:	0c c0       	rjmp	.+24     	; 0x1ea <set_pin+0x44>
 1d2:	3c 91       	ld	r19, X
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	06 2e       	mov	r0, r22
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <set_pin+0x3a>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <set_pin+0x36>
 1e4:	80 95       	com	r24
 1e6:	83 23       	and	r24, r19
 1e8:	8c 93       	st	X, r24
 1ea:	22 23       	and	r18, r18
 1ec:	69 f0       	breq	.+26     	; 0x208 <set_pin+0x62>
 1ee:	8c 91       	ld	r24, X
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <set_pin+0x54>
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <set_pin+0x50>
 1fe:	82 2b       	or	r24, r18
 200:	8c 93       	st	X, r24
 202:	80 81       	ld	r24, Z
 204:	28 2b       	or	r18, r24
 206:	20 83       	st	Z, r18
 208:	08 95       	ret

0000020a <updateRTC>:
		 
	} else {}
}

// Timers
void updateRTC() {
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
