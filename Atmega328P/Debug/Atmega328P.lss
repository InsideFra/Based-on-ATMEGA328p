
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003af  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  000003ac  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000003af  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001042  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000097f  00000000  00000000  0000152a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006c8  00000000  00000000  00001ea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000234  00000000  00000000  00002574  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000587  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000698  00000000  00000000  00002d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  000033c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
  88:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
	.high = 0xDA,
	.extended = 0x05,
};

ISR(TIMER0_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	__ms++;
  b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
	if(__ms > 1000) { // All Functions every seconds
  c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  c8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  cc:	89 3e       	cpi	r24, 0xE9	; 233
  ce:	93 40       	sbci	r25, 0x03	; 3
  d0:	18 f1       	brcs	.+70     	; 0x118 <__vector_14+0x88>
		__lastTimerSeconds++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  da:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  de:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	a1 1d       	adc	r26, r1
  e6:	b1 1d       	adc	r27, r1
  e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  f0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  f4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		__ms -= 1000;
  f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  fc:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
 100:	88 5e       	subi	r24, 0xE8	; 232
 102:	93 40       	sbci	r25, 0x03	; 3
 104:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
 108:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
		toggle_pin(0x25, 5);
 10c:	65 e0       	ldi	r22, 0x05	; 5
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	85 e2       	ldi	r24, 0x25	; 37
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <toggle_pin>
		//updateRTC();
	}
	// Tutte le funzioni ogni milli secondo
}
 118:	ff 91       	pop	r31
 11a:	ef 91       	pop	r30
 11c:	bf 91       	pop	r27
 11e:	af 91       	pop	r26
 120:	9f 91       	pop	r25
 122:	8f 91       	pop	r24
 124:	7f 91       	pop	r23
 126:	6f 91       	pop	r22
 128:	5f 91       	pop	r21
 12a:	4f 91       	pop	r20
 12c:	3f 91       	pop	r19
 12e:	2f 91       	pop	r18
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_17>:

extern uint32_t bufferDataToWrite;
extern uint8_t  bufferDataToWrite_size;

ISR(SPI_STC_vect) // ISR SPI finito
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	switch(Sending) {
 15c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	18 f0       	brcs	.+6      	; 0x16a <__vector_17+0x30>
 164:	83 30       	cpi	r24, 0x03	; 3
 166:	31 f1       	breq	.+76     	; 0x1b4 <__vector_17+0x7a>
 168:	35 c0       	rjmp	.+106    	; 0x1d4 <__vector_17+0x9a>
		case 0:
		case 1:
		case 2: if(bufferDataToWrite_size > 8) {
 16a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bufferDataToWrite_size>
 16e:	89 30       	cpi	r24, 0x09	; 9
 170:	e0 f0       	brcs	.+56     	; 0x1aa <__vector_17+0x70>
			bufferDataToWrite_size -= 8;
 172:	88 50       	subi	r24, 0x08	; 8
 174:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bufferDataToWrite_size>
			uint8_t splicing[4];
			*(uint32_t *)&splicing = bufferDataToWrite;
 178:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bufferDataToWrite>
 17c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <bufferDataToWrite+0x1>
 180:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <bufferDataToWrite+0x2>
 184:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <bufferDataToWrite+0x3>
			(bufferDataToWrite >>= 8);
 188:	49 2f       	mov	r20, r25
 18a:	5a 2f       	mov	r21, r26
 18c:	6b 2f       	mov	r22, r27
 18e:	77 27       	eor	r23, r23
 190:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <bufferDataToWrite>
 194:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <bufferDataToWrite+0x1>
 198:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <bufferDataToWrite+0x2>
 19c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <bufferDataToWrite+0x3>
			sendoverspi(splicing[3], 2);	
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	8b 2f       	mov	r24, r27
 1a4:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sendoverspi>
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <__vector_17+0x7a>
		} else {
			uint8_t splicing[4];
			*(uint32_t *)&splicing = bufferDataToWrite;
			sendoverspi(splicing[3], 3);
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <bufferDataToWrite+0x3>
 1b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sendoverspi>
		}
		case 3: bufferDataToWrite = 0; Sending = 0; toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip. // work in progress
 1b4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bufferDataToWrite>
 1b8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <bufferDataToWrite+0x1>
 1bc:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <bufferDataToWrite+0x2>
 1c0:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <bufferDataToWrite+0x3>
 1c4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	85 e2       	ldi	r24, 0x25	; 37
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <toggle_pin>
		;
	} 
	Sending = 0;
 1d4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <main>:

int main(void)
{
	// Enable Interrupts and configs
	(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
 1fa:	8f b7       	in	r24, 0x3f	; 63
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8f bf       	out	0x3f, r24	; 63
	(*(volatile uint8_t*) (0x44)) |= (0b00000010); // Set the CTC mode
 200:	84 b5       	in	r24, 0x24	; 36
 202:	82 60       	ori	r24, 0x02	; 2
 204:	84 bd       	out	0x24, r24	; 36
	(*(volatile uint8_t*) (0x45)) |= (0b00000011); // Set prescaler to 64
 206:	85 b5       	in	r24, 0x25	; 37
 208:	83 60       	ori	r24, 0x03	; 3
 20a:	85 bd       	out	0x25, r24	; 37
	(*(volatile uint8_t*) (0x6E)) |= (0x02); // enable interrupts
 20c:	ee e6       	ldi	r30, 0x6E	; 110
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0x47)) |= (0xFA); // Set comparator to 250 per il timer 
 216:	87 b5       	in	r24, 0x27	; 39
 218:	8a 6f       	ori	r24, 0xFA	; 250
 21a:	87 bd       	out	0x27, r24	; 39
	// enable Wireless
    //	startWireless();
	// enable Wireless
	// Enable interrupts and config
	set_pin(ButtonUP, 5, INPUT, 0);
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	40 e0       	ldi	r20, 0x00	; 0
 220:	65 e0       	ldi	r22, 0x05	; 5
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	8b e2       	ldi	r24, 0x2B	; 43
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 35 01 	call	0x26a	; 0x26a <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	40 e0       	ldi	r20, 0x00	; 0
 230:	66 e0       	ldi	r22, 0x06	; 6
 232:	70 e0       	ldi	r23, 0x00	; 0
 234:	8b e2       	ldi	r24, 0x2B	; 43
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 35 01 	call	0x26a	; 0x26a <set_pin>
	set_pin(Speacker, 7, OUTPUT, 0);
 23c:	20 e0       	ldi	r18, 0x00	; 0
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	67 e0       	ldi	r22, 0x07	; 7
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	8b e2       	ldi	r24, 0x2B	; 43
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 35 01 	call	0x26a	; 0x26a <set_pin>
	set_pin(0x25, 5, OUTPUT, 1);
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	70 e0       	ldi	r23, 0x00	; 0
 254:	85 e2       	ldi	r24, 0x25	; 37
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 35 01 	call	0x26a	; 0x26a <set_pin>
	// END
	foo = 1;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <foo+0x1>
 264:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <foo>
 268:	ff cf       	rjmp	.-2      	; 0x268 <main+0x6e>

0000026a <set_pin>:
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}
 26a:	fc 01       	movw	r30, r24
 26c:	dc 01       	movw	r26, r24
 26e:	11 97       	sbiw	r26, 0x01	; 1
 270:	44 23       	and	r20, r20
 272:	a1 f0       	breq	.+40     	; 0x29c <set_pin+0x32>
 274:	3c 91       	ld	r19, X
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	06 2e       	mov	r0, r22
 27c:	02 c0       	rjmp	.+4      	; 0x282 <set_pin+0x18>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <set_pin+0x14>
 286:	38 2b       	or	r19, r24
 288:	3c 93       	st	X, r19
 28a:	30 81       	ld	r19, Z
 28c:	41 e0       	ldi	r20, 0x01	; 1
 28e:	89 2b       	or	r24, r25
 290:	09 f0       	breq	.+2      	; 0x294 <set_pin+0x2a>
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	84 2f       	mov	r24, r20
 296:	83 23       	and	r24, r19
 298:	80 83       	st	Z, r24
 29a:	0c c0       	rjmp	.+24     	; 0x2b4 <set_pin+0x4a>
 29c:	3c 91       	ld	r19, X
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	06 2e       	mov	r0, r22
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <set_pin+0x40>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <set_pin+0x3c>
 2ae:	80 95       	com	r24
 2b0:	83 23       	and	r24, r19
 2b2:	8c 93       	st	X, r24
 2b4:	22 23       	and	r18, r18
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <set_pin+0x68>
 2b8:	8c 91       	ld	r24, X
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <set_pin+0x5a>
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <set_pin+0x56>
 2c8:	82 2b       	or	r24, r18
 2ca:	8c 93       	st	X, r24
 2cc:	80 81       	ld	r24, Z
 2ce:	28 2b       	or	r18, r24
 2d0:	20 83       	st	Z, r18
 2d2:	08 95       	ret

000002d4 <toggle_pin>:
 2d4:	fc 01       	movw	r30, r24
 2d6:	31 97       	sbiw	r30, 0x01	; 1
 2d8:	40 81       	ld	r20, Z
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <toggle_pin+0x10>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <toggle_pin+0xc>
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	42 23       	and	r20, r18
 2ec:	53 23       	and	r21, r19
 2ee:	24 17       	cp	r18, r20
 2f0:	35 07       	cpc	r19, r21
 2f2:	21 f4       	brne	.+8      	; 0x2fc <toggle_pin+0x28>
 2f4:	fc 01       	movw	r30, r24
 2f6:	30 81       	ld	r19, Z
 2f8:	23 27       	eor	r18, r19
 2fa:	20 83       	st	Z, r18
 2fc:	08 95       	ret

000002fe <sendoverspi>:

_Bool sendoverspi(uint8_t _data, uint8_t action) {
	if(Sending == 0) {
 2fe:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Sending>
 302:	91 11       	cpse	r25, r1
 304:	05 c0       	rjmp	.+10     	; 0x310 <sendoverspi+0x12>
		Sending = action;
 306:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <Sending>
		SPDR = _data;
 30a:	8e bd       	out	0x2e, r24	; 46
		return 1;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	08 95       	ret
	}
	return 0;
 310:	80 e0       	ldi	r24, 0x00	; 0
}
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
