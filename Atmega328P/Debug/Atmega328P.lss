
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000126  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000019a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000966  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072e  00000000  00000000  00000bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000015c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e3  00000000  00000000  0000164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000214  00000000  00000000  00001a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

extern int foo;

int main(void)
{
	set_pin(ButtonUP, 5, OUTPUT, 0);
  90:	20 e0       	ldi	r18, 0x00	; 0
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	65 e0       	ldi	r22, 0x05	; 5
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	8b e2       	ldi	r24, 0x2B	; 43
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	0e 94 5f 00 	call	0xbe	; 0xbe <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
  a0:	20 e0       	ldi	r18, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	66 e0       	ldi	r22, 0x06	; 6
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	8b e2       	ldi	r24, 0x2B	; 43
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 5f 00 	call	0xbe	; 0xbe <set_pin>
	foo = 1;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x2c>

000000be <set_pin>:
#include "functions.h"
#include "../define.h"
#include <avr/io.h>


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool INOUT) {
  be:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
  c0:	dc 01       	movw	r26, r24
  c2:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
  c4:	44 23       	and	r20, r20
  c6:	89 f0       	breq	.+34     	; 0xea <set_pin+0x2c>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
  c8:	3c 91       	ld	r19, X
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	06 2e       	mov	r0, r22
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <set_pin+0x18>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <set_pin+0x14>
  da:	93 2f       	mov	r25, r19
  dc:	98 2b       	or	r25, r24
  de:	9c 93       	st	X, r25
		(*(volatile uint8_t *)(PORT)) &= (255^(1 << PINNumb) ); // Pin Low
  e0:	90 81       	ld	r25, Z
  e2:	80 95       	com	r24
  e4:	89 23       	and	r24, r25
  e6:	80 83       	st	Z, r24
  e8:	0c c0       	rjmp	.+24     	; 0x102 <set_pin+0x44>
	} else (*(volatile uint8_t *)(DDR)) &= (0xFF^(1 << PINNumb)); // Pin input
  ea:	3c 91       	ld	r19, X
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	06 2e       	mov	r0, r22
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <set_pin+0x3a>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <set_pin+0x36>
  fc:	80 95       	com	r24
  fe:	83 23       	and	r24, r19
 100:	8c 93       	st	X, r24
	if(INOUT) {
 102:	22 23       	and	r18, r18
 104:	69 f0       	breq	.+26     	; 0x120 <set_pin+0x62>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
 106:	8c 91       	ld	r24, X
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <set_pin+0x54>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <set_pin+0x50>
 116:	82 2b       	or	r24, r18
 118:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
 11a:	80 81       	ld	r24, Z
 11c:	28 2b       	or	r18, r24
 11e:	20 83       	st	Z, r18
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
