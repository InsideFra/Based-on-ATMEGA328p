
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000001be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c0  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000075e  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ef  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f4  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000243  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  88:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
extern int foo;

volatile unsigned long __ms;

ISR(TIMER0_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting ms
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
	// ISR code to execute here
}
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <main>:
int main(void)
{
	// Enable Interrupts and configs
	
	// Enable Interrupts and configs
	set_pin(ButtonUP, 5, INPUT, 0);
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	65 e0       	ldi	r22, 0x05	; 5
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	8b e2       	ldi	r24, 0x2B	; 43
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	8b e2       	ldi	r24, 0x2B	; 43
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin>
	set_pin(Speacker, 7, OUTPUT, 0);
  c4:	20 e0       	ldi	r18, 0x00	; 0
  c6:	41 e0       	ldi	r20, 0x01	; 1
  c8:	67 e0       	ldi	r22, 0x07	; 7
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	8b e2       	ldi	r24, 0x2B	; 43
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 71 00 	call	0xe2	; 0xe2 <set_pin>
	foo = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <foo+0x1>
  dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <foo>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x3c>

000000e2 <set_pin>:
#include "functions.h"
#include "../define.h"
#include <avr/io.h>


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool INOUT) {
  e2:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
  e4:	dc 01       	movw	r26, r24
  e6:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
  e8:	44 23       	and	r20, r20
  ea:	89 f0       	breq	.+34     	; 0x10e <set_pin+0x2c>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
  ec:	3c 91       	ld	r19, X
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	06 2e       	mov	r0, r22
  f4:	02 c0       	rjmp	.+4      	; 0xfa <set_pin+0x18>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <set_pin+0x14>
  fe:	93 2f       	mov	r25, r19
 100:	98 2b       	or	r25, r24
 102:	9c 93       	st	X, r25
		(*(volatile uint8_t *)(PORT)) &= (255^(1 << PINNumb) ); // Pin Low
 104:	90 81       	ld	r25, Z
 106:	80 95       	com	r24
 108:	89 23       	and	r24, r25
 10a:	80 83       	st	Z, r24
 10c:	0c c0       	rjmp	.+24     	; 0x126 <set_pin+0x44>
	} else (*(volatile uint8_t *)(DDR)) &= (0xFF^(1 << PINNumb)); // Pin input
 10e:	3c 91       	ld	r19, X
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	06 2e       	mov	r0, r22
 116:	02 c0       	rjmp	.+4      	; 0x11c <set_pin+0x3a>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <set_pin+0x36>
 120:	80 95       	com	r24
 122:	83 23       	and	r24, r19
 124:	8c 93       	st	X, r24
	if(INOUT) {
 126:	22 23       	and	r18, r18
 128:	69 f0       	breq	.+26     	; 0x144 <set_pin+0x62>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
 12a:	8c 91       	ld	r24, X
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <set_pin+0x54>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <set_pin+0x50>
 13a:	82 2b       	or	r24, r18
 13c:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
 13e:	80 81       	ld	r24, Z
 140:	28 2b       	or	r18, r24
 142:	20 83       	st	Z, r18
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
