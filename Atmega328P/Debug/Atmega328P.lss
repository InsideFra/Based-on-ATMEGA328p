
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800100  00800100  00000444  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e83  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000980  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000601  00000000  00000000  00001d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000530  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000485  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002ed1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 30       	cpi	r26, 0x0E	; 14
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <main>
  88:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

volatile uint16_t      __ms = 0;
volatile unsigned long __lastTimerSeconds = 0; // Should atleast 136 years

ISR(TIMER0_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	af 93       	push	r26
  a2:	bf 93       	push	r27
	__ms++;
  a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  a8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
	if(__ms > 1000) { // All Functions every seconds
  b6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  ba:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  be:	89 3e       	cpi	r24, 0xE9	; 233
  c0:	93 40       	sbci	r25, 0x03	; 3
  c2:	e8 f0       	brcs	.+58     	; 0xfe <__vector_14+0x6e>
		__lastTimerSeconds++;
  c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
  d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	a1 1d       	adc	r26, r1
  d8:	b1 1d       	adc	r27, r1
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
  e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		__ms -= 1000;
  ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  f2:	88 5e       	subi	r24, 0xE8	; 232
  f4:	93 40       	sbci	r25, 0x03	; 3
  f6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  fa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
		//updateRTC();
	}
	// Tutte le funzioni ogni milli secondo
}
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_17>:

extern uint32_t bufferDataToWrite;
extern uint8_t  bufferDataToWrite_size;

ISR(SPI_STC_vect) // ISR SPI finito
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	4f 93       	push	r20
 122:	5f 93       	push	r21
 124:	6f 93       	push	r22
 126:	7f 93       	push	r23
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	af 93       	push	r26
 12e:	bf 93       	push	r27
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
	switch(Sending) {
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 138:	83 30       	cpi	r24, 0x03	; 3
 13a:	18 f0       	brcs	.+6      	; 0x142 <__vector_17+0x30>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	99 f0       	breq	.+38     	; 0x166 <__vector_17+0x54>
 140:	1c c0       	rjmp	.+56     	; 0x17a <__vector_17+0x68>
		case 0:
		case 1:
		case 2: if(bufferDataToWrite_size > 8) {
 142:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bufferDataToWrite_size>
 146:	89 30       	cpi	r24, 0x09	; 9
 148:	48 f0       	brcs	.+18     	; 0x15c <__vector_17+0x4a>
			bufferDataToWrite_size -= 8;
 14a:	88 50       	subi	r24, 0x08	; 8
 14c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <bufferDataToWrite_size>
			uint8_t splicing[4];
			*(uint32_t *)&splicing = bufferDataToWrite;
			sendoverspi(splicing[3], 2);	
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <bufferDataToWrite+0x3>
 156:	0e 94 91 01 	call	0x322	; 0x322 <sendoverspi>
 15a:	05 c0       	rjmp	.+10     	; 0x166 <__vector_17+0x54>
		} else {
			uint8_t splicing[4];
			*(uint32_t *)&splicing = bufferDataToWrite;
			sendoverspi(splicing[3], 3);
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <bufferDataToWrite+0x3>
 162:	0e 94 91 01 	call	0x322	; 0x322 <sendoverspi>
		}
		case 3: bufferDataToWrite = 0; Sending = 0; // work in progress
 166:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bufferDataToWrite>
 16a:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <bufferDataToWrite+0x1>
 16e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <bufferDataToWrite+0x2>
 172:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <bufferDataToWrite+0x3>
 176:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
		;
	} 
	Sending = 0;
 17a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <main>:

int main(void)
{
	// Enable Interrupts and configs
	(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
 1a0:	8f b7       	in	r24, 0x3f	; 63
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8f bf       	out	0x3f, r24	; 63
	(*(volatile uint8_t*) (0x44)) |= (0b00000010); // Set the CTC mode
 1a6:	84 b5       	in	r24, 0x24	; 36
 1a8:	82 60       	ori	r24, 0x02	; 2
 1aa:	84 bd       	out	0x24, r24	; 36
	(*(volatile uint8_t*) (0x45)) |= (0b00000011); // Set prescaler to 64
 1ac:	85 b5       	in	r24, 0x25	; 37
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	85 bd       	out	0x25, r24	; 37
	(*(volatile uint8_t*) (0x6E)) |= (0x02); // enable interrupts
 1b2:	ee e6       	ldi	r30, 0x6E	; 110
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	82 60       	ori	r24, 0x02	; 2
 1ba:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0x47)) |= (0xFA); // Set comparator to 250
 1bc:	87 b5       	in	r24, 0x27	; 39
 1be:	8a 6f       	ori	r24, 0xFA	; 250
 1c0:	87 bd       	out	0x27, r24	; 39
	// Enable Interrupts and configs
	set_pin(ButtonUP, 5, INPUT, 0);
 1c2:	20 e0       	ldi	r18, 0x00	; 0
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	8b e2       	ldi	r24, 0x2B	; 43
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	set_pin(ButtonDOWN, 6, INPUT, 0);
 1d2:	20 e0       	ldi	r18, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	66 e0       	ldi	r22, 0x06	; 6
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	8b e2       	ldi	r24, 0x2B	; 43
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	set_pin(Speacker, 7, OUTPUT, 0);
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	67 e0       	ldi	r22, 0x07	; 7
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8b e2       	ldi	r24, 0x2B	; 43
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	// enable Wireless
	startWireless();
 1f2:	0e 94 af 01 	call	0x35e	; 0x35e <startWireless>
	// enable Wireless
	foo = 1;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <foo+0x1>
 1fe:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <foo>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x62>

00000204 <set_pin>:
extern volatile unsigned long __lastTimerSeconds; // Should atleast 136 years

volatile uint8_t Sending = 0;


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool INOUT) {
 204:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
 206:	dc 01       	movw	r26, r24
 208:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
 20a:	44 23       	and	r20, r20
 20c:	89 f0       	breq	.+34     	; 0x230 <set_pin+0x2c>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
 20e:	3c 91       	ld	r19, X
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	06 2e       	mov	r0, r22
 216:	02 c0       	rjmp	.+4      	; 0x21c <set_pin+0x18>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	0a 94       	dec	r0
 21e:	e2 f7       	brpl	.-8      	; 0x218 <set_pin+0x14>
 220:	93 2f       	mov	r25, r19
 222:	98 2b       	or	r25, r24
 224:	9c 93       	st	X, r25
		(*(volatile uint8_t *)(PORT)) &= (255^(1 << PINNumb) ); // Pin Low
 226:	90 81       	ld	r25, Z
 228:	80 95       	com	r24
 22a:	89 23       	and	r24, r25
 22c:	80 83       	st	Z, r24
 22e:	0c c0       	rjmp	.+24     	; 0x248 <set_pin+0x44>
	} else (*(volatile uint8_t *)(DDR)) &= (0xFF^(1 << PINNumb)); // Pin input
 230:	3c 91       	ld	r19, X
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	06 2e       	mov	r0, r22
 238:	02 c0       	rjmp	.+4      	; 0x23e <set_pin+0x3a>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	0a 94       	dec	r0
 240:	e2 f7       	brpl	.-8      	; 0x23a <set_pin+0x36>
 242:	80 95       	com	r24
 244:	83 23       	and	r24, r19
 246:	8c 93       	st	X, r24
	if(INOUT) {
 248:	22 23       	and	r18, r18
 24a:	69 f0       	breq	.+26     	; 0x266 <set_pin+0x62>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
 24c:	8c 91       	ld	r24, X
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <set_pin+0x54>
 254:	22 0f       	add	r18, r18
 256:	33 1f       	adc	r19, r19
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <set_pin+0x50>
 25c:	82 2b       	or	r24, r18
 25e:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
 260:	80 81       	ld	r24, Z
 262:	28 2b       	or	r18, r24
 264:	20 83       	st	Z, r18
 266:	08 95       	ret

00000268 <toggle_pin>:
}

void toggle_pin(int PORT, int PINNumb) {
	int DDR = (PORT) - 0x01;
	// uint8_t* PIN = (PORT) - 0x02;
	if( ((*(volatile uint8_t*)(DDR)) & (1 << PINNumb)) == (1 << PINNumb) ) { // Pin output
 268:	fc 01       	movw	r30, r24
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	40 81       	ld	r20, Z
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <toggle_pin+0x10>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <toggle_pin+0xc>
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	42 23       	and	r20, r18
 280:	53 23       	and	r21, r19
 282:	24 17       	cp	r18, r20
 284:	35 07       	cpc	r19, r21
 286:	21 f4       	brne	.+8      	; 0x290 <toggle_pin+0x28>
		(*(volatile uint8_t*)(PORT)) ^= (1 << PINNumb); // Pin Toggled 
 288:	fc 01       	movw	r30, r24
 28a:	30 81       	ld	r19, Z
 28c:	23 27       	eor	r18, r19
 28e:	20 83       	st	Z, r18
 290:	08 95       	ret

00000292 <start_SPI>:
	}
}

void start_SPI(int PORTMosi, int PORTMiso, int PORTSckl, _Bool MasterSlave, _Bool MSBLSBFirst, int clk, _Bool clkRisingFalling) {
 292:	af 92       	push	r10
 294:	bf 92       	push	r11
 296:	cf 92       	push	r12
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	5c 01       	movw	r10, r24
 2a4:	7b 01       	movw	r14, r22
 2a6:	ea 01       	movw	r28, r20
	if(!MasterSlave) { // SPI as master
 2a8:	21 11       	cpse	r18, r1
 2aa:	2b c0       	rjmp	.+86     	; 0x302 <start_SPI+0x70>
	set_pin(PORTSS,   2, OUTPUT, 0);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	62 e0       	ldi	r22, 0x02	; 2
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	85 e2       	ldi	r24, 0x25	; 37
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	set_pin(PORTMosi, 3, OUTPUT, 0);
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	41 e0       	ldi	r20, 0x01	; 1
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	c5 01       	movw	r24, r10
 2c4:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	set_pin(PORTMiso, 4, INPUT,  0);
 2c8:	20 e0       	ldi	r18, 0x00	; 0
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	64 e0       	ldi	r22, 0x04	; 4
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	c7 01       	movw	r24, r14
 2d2:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	set_pin(PORTSckl, 5, OUTPUT, 0); }
 2d6:	20 e0       	ldi	r18, 0x00	; 0
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	65 e0       	ldi	r22, 0x05	; 5
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	ce 01       	movw	r24, r28
 2e0:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
	SPCR = wRegister; 
 2e4:	82 ed       	ldi	r24, 0xD2	; 210
 2e6:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
 2e8:	00 23       	and	r16, r16
 2ea:	21 f0       	breq	.+8      	; 0x2f4 <start_SPI+0x62>
 2ec:	9c b5       	in	r25, 0x2c	; 44
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	89 27       	eor	r24, r25
 2f2:	8c bd       	out	0x2c, r24	; 44
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
 2f4:	cc 20       	and	r12, r12
 2f6:	61 f0       	breq	.+24     	; 0x310 <start_SPI+0x7e>
 2f8:	9c b5       	in	r25, 0x2c	; 44
 2fa:	88 e0       	ldi	r24, 0x08	; 8
 2fc:	89 27       	eor	r24, r25
 2fe:	8c bd       	out	0x2c, r24	; 44
}
 300:	07 c0       	rjmp	.+14     	; 0x310 <start_SPI+0x7e>
	if(!MasterSlave) { // SPI as master
	set_pin(PORTSS,   2, OUTPUT, 0);
	set_pin(PORTMosi, 3, OUTPUT, 0);
	set_pin(PORTMiso, 4, INPUT,  0);
	set_pin(PORTSckl, 5, OUTPUT, 0); }
	SPCR = wRegister; 
 302:	82 ed       	ldi	r24, 0xD2	; 210
 304:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
 306:	9c b5       	in	r25, 0x2c	; 44
 308:	80 e1       	ldi	r24, 0x10	; 16
 30a:	89 27       	eor	r24, r25
 30c:	8c bd       	out	0x2c, r24	; 44
 30e:	ec cf       	rjmp	.-40     	; 0x2e8 <start_SPI+0x56>
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	0f 91       	pop	r16
 316:	ff 90       	pop	r15
 318:	ef 90       	pop	r14
 31a:	cf 90       	pop	r12
 31c:	bf 90       	pop	r11
 31e:	af 90       	pop	r10
 320:	08 95       	ret

00000322 <sendoverspi>:

_Bool sendoverspi(uint8_t _data, uint8_t action) {
	if(Sending == 0) {
 322:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Sending>
 326:	91 11       	cpse	r25, r1
 328:	05 c0       	rjmp	.+10     	; 0x334 <sendoverspi+0x12>
		Sending = action;
 32a:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <Sending>
		SPDR = _data;
 32e:	8e bd       	out	0x2e, r24	; 46
		return 1;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
	}
	return 0;
 334:	80 e0       	ldi	r24, 0x00	; 0
}
 336:	08 95       	ret

00000338 <wWrite_Register8>:
    bufferDataToWrite = (uint32_t)(datatowrite); // Si "trasforma" la variabile datatowrite da 8bit in 32bit
	bufferDataToWrite_size = 8;
    sendoverspi(hexadress, 2);
}

void wWrite_Register32(uint8_t hexadress, uint32_t datatowrite, uint8_t buflengh) {
 338:	46 2f       	mov	r20, r22
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	40 93 08 01 	sts	0x0108, r20	; 0x800108 <bufferDataToWrite>
 344:	50 93 09 01 	sts	0x0109, r21	; 0x800109 <bufferDataToWrite+0x1>
 348:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <bufferDataToWrite+0x2>
 34c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <bufferDataToWrite+0x3>
 350:	98 e0       	ldi	r25, 0x08	; 8
 352:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <bufferDataToWrite_size>
 356:	62 e0       	ldi	r22, 0x02	; 2
 358:	0e 94 91 01 	call	0x322	; 0x322 <sendoverspi>
 35c:	08 95       	ret

0000035e <startWireless>:
	
}

void startWireless() {
 35e:	cf 92       	push	r12
 360:	ef 92       	push	r14
 362:	ff 92       	push	r15
 364:	0f 93       	push	r16
	// Check Vari
	if(SPCR & (1<<SPE)) { // Spi enabled
 366:	0c b4       	in	r0, 0x2c	; 44
 368:	06 fe       	sbrs	r0, 6
 36a:	1c c0       	rjmp	.+56     	; 0x3a4 <startWireless+0x46>
		if(SPCR == wRegister) { // SPi set as i wanna
 36c:	8c b5       	in	r24, 0x2c	; 44
 36e:	82 3d       	cpi	r24, 0xD2	; 210
 370:	31 f5       	brne	.+76     	; 0x3be <startWireless+0x60>
			set_pin(WCSN, 0, OUTPUT, 1); // Il pin CSN deve essere impostato come output HIGH per un giusta transazione
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	85 e2       	ldi	r24, 0x25	; 37
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 02 01 	call	0x204	; 0x204 <set_pin>
			toggle_pin(WCSN, 0); // Necessario per avviare una transione nel chip.
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	85 e2       	ldi	r24, 0x25	; 37
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 34 01 	call	0x268	; 0x268 <toggle_pin>
			wWrite_Register8(0b01010000, 0b01110111);
 38e:	67 e7       	ldi	r22, 0x77	; 119
 390:	80 e5       	ldi	r24, 0x50	; 80
 392:	0e 94 9c 01 	call	0x338	; 0x338 <wWrite_Register8>
			toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip.
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	85 e2       	ldi	r24, 0x25	; 37
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	0e 94 34 01 	call	0x268	; 0x268 <toggle_pin>
 3a2:	0d c0       	rjmp	.+26     	; 0x3be <startWireless+0x60>
		}
	} else start_SPI(PMosi, PMiso, PSckl, 0, 0, 0, 0); startWireless();
 3a4:	c1 2c       	mov	r12, r1
 3a6:	e1 2c       	mov	r14, r1
 3a8:	f1 2c       	mov	r15, r1
 3aa:	00 e0       	ldi	r16, 0x00	; 0
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	45 e2       	ldi	r20, 0x25	; 37
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	65 e2       	ldi	r22, 0x25	; 37
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	85 e2       	ldi	r24, 0x25	; 37
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 49 01 	call	0x292	; 0x292 <start_SPI>
 3be:	0e 94 af 01 	call	0x35e	; 0x35e <startWireless>
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	cf 90       	pop	r12
 3ca:	08 95       	ret

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
