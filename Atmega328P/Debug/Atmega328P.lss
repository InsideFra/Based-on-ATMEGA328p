
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800100  00800100  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011e4  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ab4  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f9  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e8  00000000  00000000  0000327a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 96 01 	jmp	0x32c	; 0x32c <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 33       	cpi	r26, 0x3C	; 60
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:


int main(void)
{
  // USART
  SendingUSART = 0;
  90:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <SendingUSART>
	UsartBufferData = 0;
  94:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <UsartBufferData>
	// USART

	set_pin(SensorePorta, 5, INPUT,  0);
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	40 e0       	ldi	r20, 0x00	; 0
  9c:	65 e0       	ldi	r22, 0x05	; 5
  9e:	70 e0       	ldi	r23, 0x00	; 0
  a0:	8b e2       	ldi	r24, 0x2B	; 43
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <set_pin>
	set_pin(LedPWM,       6, OUTPUT, 0);
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	66 e0       	ldi	r22, 0x06	; 6
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	8b e2       	ldi	r24, 0x2B	; 43
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 7b 00 	call	0xf6	; 0xf6 <set_pin>

	// Enable Interrupts and configs
	//(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
	sei();
  b8:	78 94       	sei

	// PWM Led on PD6

  OCR0A = 0; // set PWM for 50% duty cycle
  ba:	17 bc       	out	0x27, r1	; 39
  TCCR0A |= (1 << COM0A1); // set none-inverting mode
  bc:	84 b5       	in	r24, 0x24	; 36
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << WGM01) | (1 << WGM00); // set fast PWM Mode
  c2:	84 b5       	in	r24, 0x24	; 36
  c4:	83 60       	ori	r24, 0x03	; 3
  c6:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS01); // set prescaler to 8 and starts PWM
  c8:	85 b5       	in	r24, 0x25	; 37
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	85 bd       	out	0x25, r24	; 37

	// PWM Led on PD6

	// INTERRUPT Porta PCINT21
  //(*PORTA(0x68)) = 0b00000100;
	PCICR   |= (1 << PCIE2);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 83       	st	Z, r24
	PCMSK2  |= (1 << 5);
  d8:	ed e6       	ldi	r30, 0x6D	; 109
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 83       	st	Z, r24
	// INTERRUPT PORTA
    lastPIND = PIND;
  e2:	89 b1       	in	r24, 0x09	; 9
  e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lastPIND>
		*	 Meglio focalizzarsi prima sui Timer e funzioni basi
		*  Successivamente Wireless & Wifi */
	// END

	//start_SPI(spiconfig Spic = {0, 0, 0, 0});
	foo = 1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <foo+0x1>
  f0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <foo>
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x64>

000000f6 <set_pin>:
	set_pin(PSckl, 5, OUTPUT, 0); }
	SPCR |= (1 << SPIE) || (1 << SPE) || (1 << MSTR);
	if(SPIC.MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
	if(SPIC.MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
	if(SPIC.clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}
  f6:	fc 01       	movw	r30, r24
  f8:	dc 01       	movw	r26, r24
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	44 23       	and	r20, r20
  fe:	89 f0       	breq	.+34     	; 0x122 <set_pin+0x2c>
 100:	3c 91       	ld	r19, X
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	06 2e       	mov	r0, r22
 108:	02 c0       	rjmp	.+4      	; 0x10e <set_pin+0x18>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	0a 94       	dec	r0
 110:	e2 f7       	brpl	.-8      	; 0x10a <set_pin+0x14>
 112:	93 2f       	mov	r25, r19
 114:	98 2b       	or	r25, r24
 116:	9c 93       	st	X, r25
 118:	90 81       	ld	r25, Z
 11a:	80 95       	com	r24
 11c:	89 23       	and	r24, r25
 11e:	80 83       	st	Z, r24
 120:	0c c0       	rjmp	.+24     	; 0x13a <set_pin+0x44>
 122:	3c 91       	ld	r19, X
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	06 2e       	mov	r0, r22
 12a:	02 c0       	rjmp	.+4      	; 0x130 <set_pin+0x3a>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <set_pin+0x36>
 134:	80 95       	com	r24
 136:	83 23       	and	r24, r19
 138:	8c 93       	st	X, r24
 13a:	22 23       	and	r18, r18
 13c:	69 f0       	breq	.+26     	; 0x158 <set_pin+0x62>
 13e:	8c 91       	ld	r24, X
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <set_pin+0x54>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <set_pin+0x50>
 14e:	82 2b       	or	r24, r18
 150:	8c 93       	st	X, r24
 152:	80 81       	ld	r24, Z
 154:	28 2b       	or	r18, r24
 156:	20 83       	st	Z, r18
 158:	08 95       	ret

0000015a <toggle_pin>:
 15a:	fc 01       	movw	r30, r24
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	40 81       	ld	r20, Z
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <toggle_pin+0x10>
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <toggle_pin+0xc>
 16e:	50 e0       	ldi	r21, 0x00	; 0
 170:	42 23       	and	r20, r18
 172:	53 23       	and	r21, r19
 174:	24 17       	cp	r18, r20
 176:	35 07       	cpc	r19, r21
 178:	21 f4       	brne	.+8      	; 0x182 <toggle_pin+0x28>
 17a:	fc 01       	movw	r30, r24
 17c:	30 81       	ld	r19, Z
 17e:	23 27       	eor	r18, r19
 180:	20 83       	st	Z, r18
 182:	08 95       	ret

00000184 <sendoverspi>:

_Bool sendoverspi(uint8_t _data, uint8_t action) {
	if(Sending == 0) {
 184:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 188:	91 11       	cpse	r25, r1
 18a:	05 c0       	rjmp	.+10     	; 0x196 <sendoverspi+0x12>
		Sending = action;
 18c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
		SPDR = _data;
 190:	8e bd       	out	0x2e, r24	; 46
		return 1;
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	08 95       	ret
	}
	return 0;
 196:	80 e0       	ldi	r24, 0x00	; 0
}
 198:	08 95       	ret

0000019a <updateRTC>:

// Timers
void updateRTC() { // Funzione ogni secondo
 19a:	08 95       	ret

0000019c <__vector_7>:
	(*(volatile uint8_t*) (0xB3)) |= (0xFA); // Set comparator to 250
	// Counter Millisecondi Timer 2 
}

ISR(TIMER2_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
  __ms++;
 1be:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__ms>
 1c2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__ms+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__ms+0x1>
 1cc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__ms>
  if(__ms >= 1000) { // One second passed
 1d0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__ms>
 1d4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__ms+0x1>
 1d8:	88 3e       	cpi	r24, 0xE8	; 232
 1da:	93 40       	sbci	r25, 0x03	; 3
 1dc:	40 f1       	brcs	.+80     	; 0x22e <__vector_7+0x92>
    __ms -= 1000;
 1de:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__ms>
 1e2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__ms+0x1>
 1e6:	88 5e       	subi	r24, 0xE8	; 232
 1e8:	93 40       	sbci	r25, 0x03	; 3
 1ea:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__ms+0x1>
 1ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__ms>
    __lastTimerSeconds++;
 1f2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__lastTimerSeconds>
 1f6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__lastTimerSeconds+0x1>
 1fa:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__lastTimerSeconds+0x2>
 1fe:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__lastTimerSeconds+0x3>
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	a1 1d       	adc	r26, r1
 206:	b1 1d       	adc	r27, r1
 208:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__lastTimerSeconds>
 20c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__lastTimerSeconds+0x1>
 210:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__lastTimerSeconds+0x2>
 214:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__lastTimerSeconds+0x3>
    if(!lastTimerLedOn) lastTimerLedOn++;
 218:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Timer8+0x1>
 21c:	81 11       	cpse	r24, r1
 21e:	05 c0       	rjmp	.+10     	; 0x22a <__vector_7+0x8e>
 220:	e2 e3       	ldi	r30, 0x32	; 50
 222:	f1 e0       	ldi	r31, 0x01	; 1
 224:	81 81       	ldd	r24, Z+1	; 0x01
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	81 83       	std	Z+1, r24	; 0x01
    updateRTC();
 22a:	0e 94 cd 00 	call	0x19a	; 0x19a <updateRTC>
  }
  if(startLed) {
 22e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <startLed>
 232:	88 23       	and	r24, r24
 234:	d1 f1       	breq	.+116    	; 0x2aa <__vector_7+0x10e>
      delayTimerPWM++;
 236:	e2 e3       	ldi	r30, 0x32	; 50
 238:	f1 e0       	ldi	r31, 0x01	; 1
 23a:	80 81       	ld	r24, Z
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 83       	st	Z, r24
      if(delayTimerPWM >= 10) {
 240:	80 81       	ld	r24, Z
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	e8 f1       	brcs	.+122    	; 0x2c0 <__vector_7+0x124>
        delayTimerPWM = 0;
 246:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <Timer8>
        OCR0A = ( Reverse ? (OCR0A - 3) : (OCR0A + 3) );
 24a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Reverse>
 24e:	88 23       	and	r24, r24
 250:	19 f0       	breq	.+6      	; 0x258 <__vector_7+0xbc>
 252:	87 b5       	in	r24, 0x27	; 39
 254:	83 50       	subi	r24, 0x03	; 3
 256:	02 c0       	rjmp	.+4      	; 0x25c <__vector_7+0xc0>
 258:	87 b5       	in	r24, 0x27	; 39
 25a:	8d 5f       	subi	r24, 0xFD	; 253
 25c:	87 bd       	out	0x27, r24	; 39
        Ocrlast = OCR0A;
 25e:	87 b5       	in	r24, 0x27	; 39
 260:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <Ocrlast>
        if(Ocrlast >= 240 && Reverse == 0) { // 225 viene scelto per evitare l'overflow, con valore massimo 255
 264:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Ocrlast>
 268:	80 3f       	cpi	r24, 0xF0	; 240
 26a:	70 f0       	brcs	.+28     	; 0x288 <__vector_7+0xec>
 26c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Reverse>
 270:	81 11       	cpse	r24, r1
 272:	0a c0       	rjmp	.+20     	; 0x288 <__vector_7+0xec>
          startLed = 0; Reverse = 1;
 274:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <startLed>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Reverse>
          lastTimerLedOn = 1;
 27e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <Timer8+0x1>
          LedOn = 1;
 282:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <LedOn>
 286:	1c c0       	rjmp	.+56     	; 0x2c0 <__vector_7+0x124>
        } else if(Ocrlast <= 20 && Reverse == 1) {
 288:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Ocrlast>
 28c:	85 31       	cpi	r24, 0x15	; 21
 28e:	c0 f4       	brcc	.+48     	; 0x2c0 <__vector_7+0x124>
 290:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <Reverse>
 294:	88 23       	and	r24, r24
 296:	a1 f0       	breq	.+40     	; 0x2c0 <__vector_7+0x124>
          startLed = 0; Reverse = 0; LedOn = 0; lastTimerLedOn = 0;
 298:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <startLed>
 29c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Reverse>
 2a0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <LedOn>
 2a4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Timer8+0x1>
 2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <__vector_7+0x124>
        }
      }
  } else {
    if(lastTimerLedOn >= MAXTIMELED) {
 2aa:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <Timer8+0x1>
 2ae:	84 31       	cpi	r24, 0x14	; 20
 2b0:	38 f0       	brcs	.+14     	; 0x2c0 <__vector_7+0x124>
      lastTimerLedOn = 0; startLed = 1; Reverse = 1;
 2b2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <Timer8+0x1>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <startLed>
 2bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <Reverse>
    }
  }
}
 2c0:	ff 91       	pop	r31
 2c2:	ef 91       	pop	r30
 2c4:	bf 91       	pop	r27
 2c6:	af 91       	pop	r26
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	7f 91       	pop	r23
 2ce:	6f 91       	pop	r22
 2d0:	5f 91       	pop	r21
 2d2:	4f 91       	pop	r20
 2d4:	3f 91       	pop	r19
 2d6:	2f 91       	pop	r18
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <__vector_5>:

volatile uint8_t lastPIND = 0x00;

ISR(PCINT2_vect) { // INTERRUPT PCINT2
 2e2:	1f 92       	push	r1
 2e4:	0f 92       	push	r0
 2e6:	0f b6       	in	r0, 0x3f	; 63
 2e8:	0f 92       	push	r0
 2ea:	11 24       	eor	r1, r1
 2ec:	2f 93       	push	r18
 2ee:	8f 93       	push	r24
 2f0:	9f 93       	push	r25
	uint8_t changedBits = 0x00;
	changedBits = PIND ^ lastPIND; // changedBits ti dice se e quale porta sia cambiata
 2f2:	99 b1       	in	r25, 0x09	; 9
 2f4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lastPIND>
	lastPIND = PIND; // aggiorna variabile lastPIND
 2f8:	29 b1       	in	r18, 0x09	; 9
 2fa:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <lastPIND>

	if(changedBits & (1 << 5)) { // Cambiato pin 5
 2fe:	89 27       	eor	r24, r25
 300:	85 ff       	sbrs	r24, 5
 302:	0c c0       	rjmp	.+24     	; 0x31c <__vector_5+0x3a>
		if(PIND & ( 1 << 5)) { // Pin 5 is HIGH
 304:	4d 9b       	sbis	0x09, 5	; 9
 306:	0a c0       	rjmp	.+20     	; 0x31c <__vector_5+0x3a>
			if(LedOn == 0) {
 308:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LedOn>
 30c:	81 11       	cpse	r24, r1
 30e:	04 c0       	rjmp	.+8      	; 0x318 <__vector_5+0x36>
        startLed = 1;
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <startLed>
 316:	02 c0       	rjmp	.+4      	; 0x31c <__vector_5+0x3a>
      } else if(LedOn == 0) {
 318:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <LedOn>
      }
		} else { // Pin 5 is LOW
			//
		}
	}
}
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	2f 91       	pop	r18
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_17>:
volatile extern _Bool	 bufferSize;
volatile extern uint8_t  Sending;
// Variabili SPI Wireless

ISR(SPI_STC_vect) // ISR SPI finito
{
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	// Funzioni necessarie per lo SPI
	switch(Sending) {
 34e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 352:	83 30       	cpi	r24, 0x03	; 3
 354:	18 f0       	brcs	.+6      	; 0x35c <__vector_17+0x30>
 356:	83 30       	cpi	r24, 0x03	; 3
 358:	51 f0       	breq	.+20     	; 0x36e <__vector_17+0x42>
 35a:	13 c0       	rjmp	.+38     	; 0x382 <__vector_17+0x56>
		case 0:
		case 1:
		case 2:
			if(!bufferSize) { // 32 bit
 35c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <bufferSize>
 360:	88 23       	and	r24, r24
 362:	29 f0       	breq	.+10     	; 0x36e <__vector_17+0x42>

			} else { // 8 bit
				sendoverspi(bufferDataToWrite, 3);
 364:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <bufferDataToWrite>
 368:	63 e0       	ldi	r22, 0x03	; 3
 36a:	0e 94 c2 00 	call	0x184	; 0x184 <sendoverspi>
			}
		case 3: bufferDataToWrite = 0; Sending = 0; toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip. // work in progress
 36e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <bufferDataToWrite>
 372:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	85 e2       	ldi	r24, 0x25	; 37
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 ad 00 	call	0x15a	; 0x15a <toggle_pin>
		;
	}
	Sending = 0;
 382:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
