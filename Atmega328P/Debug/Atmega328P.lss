
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000004f7  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000054  00800100  00800100  000004f4  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000004f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000004f7  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000528  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000c8  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fdb  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000097e  00000000  00000000  0000160b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006d8  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000224  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005aa  00000000  00000000  00002888  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005ff  00000000  00000000  00002e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000098  00000000  00000000  00003431  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_7>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 35       	cpi	r26, 0x54	; 84
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 00 01 	call	0x200	; 0x200 <main>
  88:	0c 94 2e 02 	jmp	0x45c	; 0x45c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_7>:
uint16_t Timer[MAXTIMERS];
uint16_t lastTimer[MAXTIMERS];
void     *pointerFunctionTimer[MAXTIMERS];
// END
ISR(TIMER2_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	4f 93       	push	r20
  a0:	5f 93       	push	r21
  a2:	6f 93       	push	r22
  a4:	7f 93       	push	r23
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	af 93       	push	r26
  ac:	bf 93       	push	r27
  ae:	ef 93       	push	r30
  b0:	ff 93       	push	r31
	__ms++;
  b2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  b6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
  c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
  c4:	a9 e0       	ldi	r26, 0x09	; 9
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e0 e4       	ldi	r30, 0x40	; 64
  ca:	f1 e0       	ldi	r31, 0x01	; 1
  cc:	44 e5       	ldi	r20, 0x54	; 84
  ce:	51 e0       	ldi	r21, 0x01	; 1
  for(uint8_t i = 0; i < MAXTIMERS; i++) {
		if(Timer[i] != 0) {
  d0:	8d 91       	ld	r24, X+
  d2:	9d 91       	ld	r25, X+
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	49 f0       	breq	.+18     	; 0xea <__vector_7+0x5a>
			if(lastTimer[i] < Timer[i]) {
  d8:	20 81       	ld	r18, Z
  da:	31 81       	ldd	r19, Z+1	; 0x01
  dc:	28 17       	cp	r18, r24
  de:	39 07       	cpc	r19, r25
  e0:	20 f4       	brcc	.+8      	; 0xea <__vector_7+0x5a>
				lastTimer[i]++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	31 83       	std	Z+1, r19	; 0x01
  e8:	20 83       	st	Z, r18
  ea:	32 96       	adiw	r30, 0x02	; 2
void     *pointerFunctionTimer[MAXTIMERS];
// END
ISR(TIMER2_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
	__ms++;
  for(uint8_t i = 0; i < MAXTIMERS; i++) {
  ec:	e4 17       	cp	r30, r20
  ee:	f5 07       	cpc	r31, r21
  f0:	79 f7       	brne	.-34     	; 0xd0 <__vector_7+0x40>
				// Azione
				pointerFunctionTimer[i];
			}
		}
	}
	if(__ms > 1000) { // All Functions every seconds
  f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
  f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
  fa:	89 3e       	cpi	r24, 0xE9	; 233
  fc:	93 40       	sbci	r25, 0x03	; 3
  fe:	f8 f0       	brcs	.+62     	; 0x13e <__vector_7+0xae>
		__lastTimerSeconds++;
 100:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 108:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 10c:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	a1 1d       	adc	r26, r1
 114:	b1 1d       	adc	r27, r1
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 11a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 11e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 122:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		__ms -= 1000;
 126:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__ms>
 12a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__ms+0x1>
 12e:	88 5e       	subi	r24, 0xE8	; 232
 130:	93 40       	sbci	r25, 0x03	; 3
 132:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__ms+0x1>
 136:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__ms>
		updateRTC();
 13a:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <updateRTC>
	}
	// Tutte le funzioni ogni milli secondo
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_5>:
volatile uint8_t lastPIND;
ISR(PCINT2_vect) {
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	8f 93       	push	r24
	uint8_t changedBits = 0x00;
	changedBits = PIND ^ lastPIND;
 16c:	89 b1       	in	r24, 0x09	; 9
 16e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <lastPIND>
	lastPIND = PIND;
 172:	89 b1       	in	r24, 0x09	; 9
 174:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <lastPIND>
}
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <__vector_17>:
volatile extern uint8_t  bufferDataToWrite;
volatile extern _Bool	  bufferSize;
// Variabili SPI Wireless

ISR(SPI_STC_vect) // ISR SPI finito
{
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	switch(Sending) {
 1a6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 1aa:	83 30       	cpi	r24, 0x03	; 3
 1ac:	18 f0       	brcs	.+6      	; 0x1b4 <__vector_17+0x30>
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <__vector_17+0x42>
 1b2:	13 c0       	rjmp	.+38     	; 0x1da <__vector_17+0x56>
		case 0:
		case 1:
		case 2:
			if(!bufferSize) { // 32 bit
 1b4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <bufferSize>
 1b8:	88 23       	and	r24, r24
 1ba:	29 f0       	breq	.+10     	; 0x1c6 <__vector_17+0x42>
				uint8_t splicing[4];
				*(uint32_t *)&splicing = bufferDataToWrite;
				(bufferDataToWrite >>= 8);
				sendoverspi(splicing[3], 2);*/
			} else { // 8 bit
				sendoverspi(bufferDataToWrite, 3);
 1bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <bufferDataToWrite>
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <sendoverspi>
			}
		case 3: bufferDataToWrite = 0; Sending = 0; toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip. // work in progress
 1c6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <bufferDataToWrite>
 1ca:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	70 e0       	ldi	r23, 0x00	; 0
 1d2:	85 e2       	ldi	r24, 0x25	; 37
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 77 01 	call	0x2ee	; 0x2ee <toggle_pin>
		;
	}
	Sending = 0;
 1da:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Sending>
}
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0f be       	out	0x3f, r0	; 63
 1fa:	0f 90       	pop	r0
 1fc:	1f 90       	pop	r1
 1fe:	18 95       	reti

00000200 <main>:

int main(void)
{
	set_pin(SensorePorta, 5, INPUT,  0);
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	65 e0       	ldi	r22, 0x05	; 5
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	8b e2       	ldi	r24, 0x2B	; 43
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	set_pin(LedPWM,       6, OUTPUT, 0);
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	// Enable Interrupts and configs
	(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
 220:	8f b7       	in	r24, 0x3f	; 63
 222:	80 68       	ori	r24, 0x80	; 128
 224:	8f bf       	out	0x3f, r24	; 63
	// PWM LED Timer 0
	(*(volatile uint8_t*) (0x44)) |= (0b01000001); // Set the Phase PWM Correct Mode, Toggle 0C0A (PWMLED) e Disconnect OC0B (Sensore Porta)
 226:	84 b5       	in	r24, 0x24	; 36
 228:	81 64       	ori	r24, 0x41	; 65
 22a:	84 bd       	out	0x24, r24	; 36
	(*(volatile uint8_t*) (0x45)) |= (0b00001100); // Set prescaler to 256, PWM Correct Mode
 22c:	85 b5       	in	r24, 0x25	; 37
 22e:	8c 60       	ori	r24, 0x0C	; 12
 230:	85 bd       	out	0x25, r24	; 37

	(*(volatile uint8_t*) (0x6E)) |= (0x00); // NO interrupts
 232:	ee e6       	ldi	r30, 0x6E	; 110
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0x47)) |= (0x00); // Set comparator to 0%
 23a:	87 b5       	in	r24, 0x27	; 39
 23c:	87 bd       	out	0x27, r24	; 39
	// pwm lED Timer 0

	// Counter Millisecondi Timer 2
	(*(volatile uint8_t*) (0xB0)) |= (0x02); // Disconnect Timer 2 ports, SET CTC MODE
 23e:	e0 eb       	ldi	r30, 0xB0	; 176
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	82 60       	ori	r24, 0x02	; 2
 246:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0xB1)) |= (0b00000100); // Set prescaler to 64, CTC MODE
 248:	e1 eb       	ldi	r30, 0xB1	; 177
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	84 60       	ori	r24, 0x04	; 4
 250:	80 83       	st	Z, r24

	(*(volatile uint8_t*) (0x70)) |= (0x02); // SI interrupts, only comp a
 252:	e0 e7       	ldi	r30, 0x70	; 112
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	80 83       	st	Z, r24
	(*(volatile uint8_t*) (0xB3)) |= (0xFA); // Set comparator to 250
 25c:	e3 eb       	ldi	r30, 0xB3	; 179
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	8a 6f       	ori	r24, 0xFA	; 250
 264:	80 83       	st	Z, r24
	// Counter Millisecondi Timer 2

	// INTERRUPT Porta PCINT21
  (*PORTA(0x68)) = (0x08);
 266:	88 e0       	ldi	r24, 0x08	; 8
 268:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	// INTERRUPT PORTA
  lastPIND = PIND;
 26c:	89 b1       	in	r24, 0x09	; 9
 26e:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <lastPIND>
	// enable Wireless
    startWireless();
 272:	0e 94 03 02 	call	0x406	; 0x406 <startWireless>
	set_pin(ButtonDOWN, 6, INPUT, 0);
	set_pin(Speacker, 7, OUTPUT, 0);
	set_pin(0x25, 5, OUTPUT, 1);*/
	// END

	foo = 1;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <foo+0x1>
 27e:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <foo>
 282:	ff cf       	rjmp	.-2      	; 0x282 <main+0x82>

00000284 <set_pin>:
extern volatile unsigned long __lastTimerSeconds; // Should atleast 136 years

volatile uint8_t Sending = 0;


void set_pin(int PORT, int PINNumb, _Bool INPOUT, _Bool LowHIGH) {
 284:	fc 01       	movw	r30, r24
	int DDR = (PORT) - 0x01;
 286:	dc 01       	movw	r26, r24
 288:	11 97       	sbiw	r26, 0x01	; 1
	if (INPOUT)  {
 28a:	44 23       	and	r20, r20
 28c:	a1 f0       	breq	.+40     	; 0x2b6 <set_pin+0x32>
		// Pin output, default low
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin output
 28e:	3c 91       	ld	r19, X
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	06 2e       	mov	r0, r22
 296:	02 c0       	rjmp	.+4      	; 0x29c <set_pin+0x18>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	0a 94       	dec	r0
 29e:	e2 f7       	brpl	.-8      	; 0x298 <set_pin+0x14>
 2a0:	38 2b       	or	r19, r24
 2a2:	3c 93       	st	X, r19
		(*(volatile uint8_t *)(PORT)) &= !(1 << PINNumb); // Pin Low
 2a4:	30 81       	ld	r19, Z
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	89 2b       	or	r24, r25
 2aa:	09 f0       	breq	.+2      	; 0x2ae <set_pin+0x2a>
 2ac:	40 e0       	ldi	r20, 0x00	; 0
 2ae:	84 2f       	mov	r24, r20
 2b0:	83 23       	and	r24, r19
 2b2:	80 83       	st	Z, r24
 2b4:	0c c0       	rjmp	.+24     	; 0x2ce <set_pin+0x4a>
	} else (*(volatile uint8_t *)(DDR)) &= (0xFF^(1 << PINNumb)); // Pin input
 2b6:	3c 91       	ld	r19, X
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	06 2e       	mov	r0, r22
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <set_pin+0x40>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	0a 94       	dec	r0
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <set_pin+0x3c>
 2c8:	80 95       	com	r24
 2ca:	83 23       	and	r24, r19
 2cc:	8c 93       	st	X, r24
	if(LowHIGH) {
 2ce:	22 23       	and	r18, r18
 2d0:	69 f0       	breq	.+26     	; 0x2ec <set_pin+0x68>
		// Set Pin High, --> set pin output
		(*(volatile uint8_t *)(DDR)) |= (1 << PINNumb); // Pin Output
 2d2:	8c 91       	ld	r24, X
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <set_pin+0x5a>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	6a 95       	dec	r22
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <set_pin+0x56>
 2e2:	82 2b       	or	r24, r18
 2e4:	8c 93       	st	X, r24
		(*(volatile uint8_t *)(PORT)) |= (1 << PINNumb); } // Pin High
 2e6:	80 81       	ld	r24, Z
 2e8:	28 2b       	or	r18, r24
 2ea:	20 83       	st	Z, r18
 2ec:	08 95       	ret

000002ee <toggle_pin>:
}

void toggle_pin(int PORT, int PINNumb) {
	int DDR = (PORT) - 0x01;
	// uint8_t* PIN = (PORT) - 0x02;
	if( ((*(volatile uint8_t*)(DDR)) & (1 << PINNumb)) == (1 << PINNumb) ) { // Pin output
 2ee:	fc 01       	movw	r30, r24
 2f0:	31 97       	sbiw	r30, 0x01	; 1
 2f2:	40 81       	ld	r20, Z
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <toggle_pin+0x10>
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	6a 95       	dec	r22
 300:	e2 f7       	brpl	.-8      	; 0x2fa <toggle_pin+0xc>
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	42 23       	and	r20, r18
 306:	53 23       	and	r21, r19
 308:	24 17       	cp	r18, r20
 30a:	35 07       	cpc	r19, r21
 30c:	21 f4       	brne	.+8      	; 0x316 <toggle_pin+0x28>
		(*(volatile uint8_t*)(PORT)) ^= (1 << PINNumb); // Pin Toggled
 30e:	fc 01       	movw	r30, r24
 310:	30 81       	ld	r19, Z
 312:	23 27       	eor	r18, r19
 314:	20 83       	st	Z, r18
 316:	08 95       	ret

00000318 <getstatus_pin>:
}

_Bool getstatus_pin(int PORT, int PINNUmb) {
	// work ins progress
	return 0;
}
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	08 95       	ret

0000031c <start_SPI>:

void start_SPI(int PORTMosi, int PORTMiso, int PORTSckl, _Bool MasterSlave, _Bool MSBLSBFirst, int clk, _Bool clkRisingFalling) {
 31c:	af 92       	push	r10
 31e:	bf 92       	push	r11
 320:	cf 92       	push	r12
 322:	ef 92       	push	r14
 324:	ff 92       	push	r15
 326:	0f 93       	push	r16
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	5c 01       	movw	r10, r24
 32e:	7b 01       	movw	r14, r22
 330:	ea 01       	movw	r28, r20
	if(!MasterSlave) { // SPI as master
 332:	21 11       	cpse	r18, r1
 334:	2b c0       	rjmp	.+86     	; 0x38c <start_SPI+0x70>
	set_pin(PORTSS,   2, OUTPUT, 0);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 e2       	ldi	r24, 0x25	; 37
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	set_pin(PORTMosi, 3, OUTPUT, 0);
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	63 e0       	ldi	r22, 0x03	; 3
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	c5 01       	movw	r24, r10
 34e:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	set_pin(PORTMiso, 4, INPUT,  0);
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	64 e0       	ldi	r22, 0x04	; 4
 358:	70 e0       	ldi	r23, 0x00	; 0
 35a:	c7 01       	movw	r24, r14
 35c:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	set_pin(PORTSckl, 5, OUTPUT, 0); }
 360:	20 e0       	ldi	r18, 0x00	; 0
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	65 e0       	ldi	r22, 0x05	; 5
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	ce 01       	movw	r24, r28
 36a:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	SPCR = wRegister;
 36e:	82 ed       	ldi	r24, 0xD2	; 210
 370:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
 372:	00 23       	and	r16, r16
 374:	21 f0       	breq	.+8      	; 0x37e <start_SPI+0x62>
 376:	9c b5       	in	r25, 0x2c	; 44
 378:	80 e2       	ldi	r24, 0x20	; 32
 37a:	89 27       	eor	r24, r25
 37c:	8c bd       	out	0x2c, r24	; 44
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
 37e:	cc 20       	and	r12, r12
 380:	61 f0       	breq	.+24     	; 0x39a <start_SPI+0x7e>
 382:	9c b5       	in	r25, 0x2c	; 44
 384:	88 e0       	ldi	r24, 0x08	; 8
 386:	89 27       	eor	r24, r25
 388:	8c bd       	out	0x2c, r24	; 44
}
 38a:	07 c0       	rjmp	.+14     	; 0x39a <start_SPI+0x7e>
	if(!MasterSlave) { // SPI as master
	set_pin(PORTSS,   2, OUTPUT, 0);
	set_pin(PORTMosi, 3, OUTPUT, 0);
	set_pin(PORTMiso, 4, INPUT,  0);
	set_pin(PORTSckl, 5, OUTPUT, 0); }
	SPCR = wRegister;
 38c:	82 ed       	ldi	r24, 0xD2	; 210
 38e:	8c bd       	out	0x2c, r24	; 44
	// Setup as : Interrupt enabled (SPIE0 bit 7 set 1), Spi Enabled (SPE0 bit 6 set 1), MSB First (DORD bit 5 set 0),  Master Enabled (MSTR bit 4 set 1),
	// clk Rising ( CPOL bit 3 set 0), bit 2 not use, SPI Clock Rate set as fosc/64 ( SPR [0, 1])
	if(MasterSlave)     SPCR ^= (1 << MSTR);     // Setup as Slave , MSTR must be 0
 390:	9c b5       	in	r25, 0x2c	; 44
 392:	80 e1       	ldi	r24, 0x10	; 16
 394:	89 27       	eor	r24, r25
 396:	8c bd       	out	0x2c, r24	; 44
 398:	ec cf       	rjmp	.-40     	; 0x372 <start_SPI+0x56>
	if(MSBLSBFirst)     SPCR ^= (1 << DORD);     // Setup as LSB First, DRDB must be 1
	if(clkRisingFalling) SPCR ^= (1 << CPOL); // Setup as Falling Edge, CPOL must be 1
}
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	0f 91       	pop	r16
 3a0:	ff 90       	pop	r15
 3a2:	ef 90       	pop	r14
 3a4:	cf 90       	pop	r12
 3a6:	bf 90       	pop	r11
 3a8:	af 90       	pop	r10
 3aa:	08 95       	ret

000003ac <sendoverspi>:

_Bool sendoverspi(uint8_t _data, uint8_t action) {
	if(Sending == 0) {
 3ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <Sending>
 3b0:	91 11       	cpse	r25, r1
 3b2:	05 c0       	rjmp	.+10     	; 0x3be <sendoverspi+0x12>
		Sending = action;
 3b4:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <Sending>
		SPDR = _data;
 3b8:	8e bd       	out	0x2e, r24	; 46
		return 1;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	08 95       	ret
	}
	return 0;
 3be:	80 e0       	ldi	r24, 0x00	; 0
}
 3c0:	08 95       	ret

000003c2 <updateRTC>:

// Timers
void updateRTC() { // Funzione ogni secondo
 3c2:	08 95       	ret

000003c4 <wWrite_Register8>:
*
*
*
*/

void wWrite_Register8(uint8_t hexadress, uint8_t datatowrite) {
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	c8 2f       	mov	r28, r24
 3ca:	d6 2f       	mov	r29, r22
	set_pin(WCSN, 0, OUTPUT, 1); // Il pin CSN deve essere impostato come output HIGH per un giusta transazione
 3cc:	21 e0       	ldi	r18, 0x01	; 1
 3ce:	41 e0       	ldi	r20, 0x01	; 1
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	85 e2       	ldi	r24, 0x25	; 37
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	0e 94 42 01 	call	0x284	; 0x284 <set_pin>
	toggle_pin(WCSN, 0); // Necessario per avviare una trasmissione nel chip.
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	70 e0       	ldi	r23, 0x00	; 0
 3e0:	85 e2       	ldi	r24, 0x25	; 37
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 77 01 	call	0x2ee	; 0x2ee <toggle_pin>
    bufferDataToWrite = datatowrite; // Si "trasforma" la variabile datatowrite da 8bit in 32bit
 3e8:	d0 93 08 01 	sts	0x0108, r29	; 0x800108 <bufferDataToWrite>
		bufferSize = 0;
 3ec:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <bufferSize>
    sendoverspi(hexadress, 2); while(Sending) {}
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	8c 2f       	mov	r24, r28
 3f4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <sendoverspi>
 3f8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Sending>
 3fc:	81 11       	cpse	r24, r1
 3fe:	fe cf       	rjmp	.-4      	; 0x3fc <wWrite_Register8+0x38>
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret

00000406 <startWireless>:
	bufferDataToWrite = datatowrite;
	bufferDataToWrite_size = buflengh;
	sendoverspi(hexadress, 2);
}*/

void startWireless() {
 406:	cf 92       	push	r12
 408:	ef 92       	push	r14
 40a:	ff 92       	push	r15
 40c:	0f 93       	push	r16
	// Check Vari
	if(SPCR & (1<<SPE)) { // Spi enabled
 40e:	0c b4       	in	r0, 0x2c	; 44
 410:	06 fe       	sbrs	r0, 6
 412:	10 c0       	rjmp	.+32     	; 0x434 <startWireless+0x2e>
		if(SPCR == wRegister) { // SPi set as i wanna
 414:	8c b5       	in	r24, 0x2c	; 44
 416:	82 3d       	cpi	r24, 0xD2	; 210
 418:	d1 f4       	brne	.+52     	; 0x44e <startWireless+0x48>
			wWrite_Register8(0b01010000, 0b01110111);
 41a:	67 e7       	ldi	r22, 0x77	; 119
 41c:	80 e5       	ldi	r24, 0x50	; 80
 41e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <wWrite_Register8>
			while(!getstatus_pin(WCSN, 0)) { // Work in progress
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	85 e2       	ldi	r24, 0x25	; 37
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 8c 01 	call	0x318	; 0x318 <getstatus_pin>
 42e:	88 23       	and	r24, r24
 430:	c1 f3       	breq	.-16     	; 0x422 <startWireless+0x1c>
 432:	0d c0       	rjmp	.+26     	; 0x44e <startWireless+0x48>

      }
		}
	} else start_SPI(PMosi, PMiso, PSckl, 0, 0, 0, 0); startWireless();
 434:	c1 2c       	mov	r12, r1
 436:	e1 2c       	mov	r14, r1
 438:	f1 2c       	mov	r15, r1
 43a:	00 e0       	ldi	r16, 0x00	; 0
 43c:	20 e0       	ldi	r18, 0x00	; 0
 43e:	45 e2       	ldi	r20, 0x25	; 37
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	65 e2       	ldi	r22, 0x25	; 37
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	85 e2       	ldi	r24, 0x25	; 37
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 8e 01 	call	0x31c	; 0x31c <start_SPI>
 44e:	0e 94 03 02 	call	0x406	; 0x406 <startWireless>
}
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	cf 90       	pop	r12
 45a:	08 95       	ret

0000045c <_exit>:
 45c:	f8 94       	cli

0000045e <__stop_program>:
 45e:	ff cf       	rjmp	.-2      	; 0x45e <__stop_program>
