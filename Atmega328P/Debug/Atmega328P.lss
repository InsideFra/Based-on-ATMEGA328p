
Atmega328P.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800102  00800102  000005c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001426  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b0a  00000000  00000000  00001b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000979  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000681  00000000  00000000  00003270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000564  00000000  00000000  000038f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_7>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:


int main(void)
{
   // USART
    SendingUSART = 0;
  a6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <SendingUSART>
	UsartBufferData = 0;
  aa:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <UsartBufferData>
	// USART

	set_pin(SensorePorta, 5, INPUT,  0);
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	65 e0       	ldi	r22, 0x05	; 5
  b4:	70 e0       	ldi	r23, 0x00	; 0
  b6:	8b e2       	ldi	r24, 0x2B	; 43
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 bd 00 	call	0x17a	; 0x17a <set_pin>
	set_pin(LedPWM,       6, OUTPUT, 0);
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	66 e0       	ldi	r22, 0x06	; 6
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 bd 00 	call	0x17a	; 0x17a <set_pin>

  // Load Orario from EEPROM
  EEARH = 0x00; EEARL = 0x00;
  ce:	12 bc       	out	0x22, r1	; 34
  d0:	11 bc       	out	0x21, r1	; 33
  EECR = 0x00;
  d2:	1f ba       	out	0x1f, r1	; 31
  EECR |= (1 << EERIE) | (1 << EERE);
  d4:	8f b3       	in	r24, 0x1f	; 31
  d6:	89 60       	ori	r24, 0x09	; 9
  d8:	8f bb       	out	0x1f, r24	; 31
  Orario.Secondi = EEDR;
  da:	80 b5       	in	r24, 0x20	; 32
  dc:	e2 e0       	ldi	r30, 0x02	; 2
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	80 83       	st	Z, r24
  EEARH = 0x00; EEARL = 0x01;
  e2:	12 bc       	out	0x22, r1	; 34
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	21 bd       	out	0x21, r18	; 33
  EECR |= (1 << EERE);
  e8:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Minuti = EEDR;
  ea:	80 b5       	in	r24, 0x20	; 32
  ec:	81 83       	std	Z+1, r24	; 0x01
  EEARH = 0x00; EEARL = 0x02;
  ee:	12 bc       	out	0x22, r1	; 34
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
  f4:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Ore = EEDR;
  f6:	80 b5       	in	r24, 0x20	; 32
  f8:	82 83       	std	Z+2, r24	; 0x02
  EEARH = 0x00; EEARL = 0x03;
  fa:	12 bc       	out	0x22, r1	; 34
  fc:	83 e0       	ldi	r24, 0x03	; 3
  fe:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
 100:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Giorno = EEDR;
 102:	80 b5       	in	r24, 0x20	; 32
 104:	83 83       	std	Z+3, r24	; 0x03
  EEARH = 0x00; EEARL = 0x04;
 106:	12 bc       	out	0x22, r1	; 34
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EERE);
 10c:	f8 9a       	sbi	0x1f, 0	; 31
  Orario.Mesi = EEDR;
 10e:	80 b5       	in	r24, 0x20	; 32
 110:	84 83       	std	Z+4, r24	; 0x04
  EEARH = 0x00; EEARL = 0x05;
 112:	12 bc       	out	0x22, r1	; 34
 114:	85 e0       	ldi	r24, 0x05	; 5
 116:	81 bd       	out	0x21, r24	; 33
  EECR |= (1 << EEDR);
 118:	80 b5       	in	r24, 0x20	; 32
 11a:	3f b3       	in	r19, 0x1f	; 31
 11c:	41 e0       	ldi	r20, 0x01	; 1
 11e:	50 e0       	ldi	r21, 0x00	; 0
 120:	ba 01       	movw	r22, r20
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0x82>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0x7e>
 12c:	cb 01       	movw	r24, r22
 12e:	83 2b       	or	r24, r19
 130:	8f bb       	out	0x1f, r24	; 31
  EEARH = 0x00; EEARL = 0x00;
 132:	12 bc       	out	0x22, r1	; 34
 134:	11 bc       	out	0x21, r1	; 33
  // Load Orario from EEPROM

	// Enable Interrupts and configs
	//(*(volatile uint8_t*) (0x5F)) |= (1 << 7); // Enable interrupts
	sei();
 136:	78 94       	sei

	// PWM Led on PD6
  OCR0A = 0; // set PWM for 50% duty cycle
 138:	17 bc       	out	0x27, r1	; 39
  TCCR0A |= (1 << COM0A1); // set none-inverting mode
 13a:	84 b5       	in	r24, 0x24	; 36
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	84 bd       	out	0x24, r24	; 36
  TCCR0A |= (1 << WGM01) | (1 << WGM00); // set fast PWM Mode
 140:	84 b5       	in	r24, 0x24	; 36
 142:	83 60       	ori	r24, 0x03	; 3
 144:	84 bd       	out	0x24, r24	; 36
  TCCR0B |= (1 << CS01); // set prescaler to 8 and starts PWM
 146:	85 b5       	in	r24, 0x25	; 37
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	85 bd       	out	0x25, r24	; 37
  // PWM Led on PD6

	// INTERRUPT Porta PCINT21
  //(*PORTA(0x68)) = 0b00000100;
	PCICR   |= (1 << PCIE2);
 14c:	e8 e6       	ldi	r30, 0x68	; 104
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	84 60       	ori	r24, 0x04	; 4
 154:	80 83       	st	Z, r24
	PCMSK2  |= (1 << 5);
 156:	ed e6       	ldi	r30, 0x6D	; 109
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	80 83       	st	Z, r24
	// INTERRUPT PORTA
  lastPIND = PIND;
 160:	89 b1       	in	r24, 0x09	; 9
 162:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <lastPIND>
		*  Successivamente Wireless & Wifi */
	// END

	//start_SPI(spiconfig Spic = {0, 0, 0, 0});

	foo = 1;
 166:	50 93 25 01 	sts	0x0125, r21	; 0x800125 <foo+0x1>
 16a:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <foo>
    tempTimerLed = 50; startLed = 1; // Accensione dei Led
 16e:	82 e3       	ldi	r24, 0x32	; 50
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 174:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <startLed>
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0xd2>

0000017a <set_pin>:
	EEPROM_write(0x03, Orario.Giorno);
	EEPROM_write(0x04, Orario.Mesi);
	EEPROM_write(0x05, Orario.Anno);
}

void defineTimer(uint8_t TimerNumber, uint8_t Mode, uint8_t prescaler) {
 17a:	fc 01       	movw	r30, r24
 17c:	dc 01       	movw	r26, r24
 17e:	11 97       	sbiw	r26, 0x01	; 1
 180:	44 23       	and	r20, r20
 182:	89 f0       	breq	.+34     	; 0x1a6 <set_pin+0x2c>
 184:	3c 91       	ld	r19, X
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	06 2e       	mov	r0, r22
 18c:	02 c0       	rjmp	.+4      	; 0x192 <set_pin+0x18>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	0a 94       	dec	r0
 194:	e2 f7       	brpl	.-8      	; 0x18e <set_pin+0x14>
 196:	93 2f       	mov	r25, r19
 198:	98 2b       	or	r25, r24
 19a:	9c 93       	st	X, r25
 19c:	90 81       	ld	r25, Z
 19e:	80 95       	com	r24
 1a0:	89 23       	and	r24, r25
 1a2:	80 83       	st	Z, r24
 1a4:	0c c0       	rjmp	.+24     	; 0x1be <set_pin+0x44>
 1a6:	3c 91       	ld	r19, X
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	06 2e       	mov	r0, r22
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <set_pin+0x3a>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	0a 94       	dec	r0
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <set_pin+0x36>
 1b8:	80 95       	com	r24
 1ba:	83 23       	and	r24, r19
 1bc:	8c 93       	st	X, r24
 1be:	22 23       	and	r18, r18
 1c0:	69 f0       	breq	.+26     	; 0x1dc <set_pin+0x62>
 1c2:	8c 91       	ld	r24, X
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <set_pin+0x54>
 1ca:	22 0f       	add	r18, r18
 1cc:	33 1f       	adc	r19, r19
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <set_pin+0x50>
 1d2:	82 2b       	or	r24, r18
 1d4:	8c 93       	st	X, r24
 1d6:	80 81       	ld	r24, Z
 1d8:	28 2b       	or	r18, r24
 1da:	20 83       	st	Z, r18
 1dc:	08 95       	ret

000001de <toggle_pin>:
 1de:	fc 01       	movw	r30, r24
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	40 81       	ld	r20, Z
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <toggle_pin+0x10>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <toggle_pin+0xc>
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	42 23       	and	r20, r18
 1f6:	53 23       	and	r21, r19
 1f8:	24 17       	cp	r18, r20
 1fa:	35 07       	cpc	r19, r21
 1fc:	21 f4       	brne	.+8      	; 0x206 <toggle_pin+0x28>
 1fe:	fc 01       	movw	r30, r24
 200:	30 81       	ld	r19, Z
 202:	23 27       	eor	r18, r19
 204:	20 83       	st	Z, r18
 206:	08 95       	ret

00000208 <sendoverspi>:
 208:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <Sending>
 20c:	91 11       	cpse	r25, r1
 20e:	05 c0       	rjmp	.+10     	; 0x21a <sendoverspi+0x12>
 210:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <Sending>
 214:	8e bd       	out	0x2e, r24	; 46
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	08 95       	ret

0000021e <updateRTC>:
 21e:	e2 e0       	ldi	r30, 0x02	; 2
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	80 81       	ld	r24, Z
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 83       	st	Z, r24
 228:	80 81       	ld	r24, Z
 22a:	8c 33       	cpi	r24, 0x3C	; 60
 22c:	e0 f1       	brcs	.+120    	; 0x2a6 <updateRTC+0x88>
 22e:	20 81       	ld	r18, Z
 230:	90 81       	ld	r25, Z
 232:	30 81       	ld	r19, Z
 234:	51 81       	ldd	r21, Z+1	; 0x01
 236:	49 e8       	ldi	r20, 0x89	; 137
 238:	34 9f       	mul	r19, r20
 23a:	31 2d       	mov	r19, r1
 23c:	11 24       	eor	r1, r1
 23e:	32 95       	swap	r19
 240:	36 95       	lsr	r19
 242:	37 70       	andi	r19, 0x07	; 7
 244:	89 2f       	mov	r24, r25
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	6c e3       	ldi	r22, 0x3C	; 60
 24a:	36 9f       	mul	r19, r22
 24c:	80 19       	sub	r24, r0
 24e:	91 09       	sbc	r25, r1
 250:	11 24       	eor	r1, r1
 252:	24 9f       	mul	r18, r20
 254:	21 2d       	mov	r18, r1
 256:	11 24       	eor	r1, r1
 258:	22 95       	swap	r18
 25a:	26 95       	lsr	r18
 25c:	27 70       	andi	r18, 0x07	; 7
 25e:	82 0f       	add	r24, r18
 260:	91 1d       	adc	r25, r1
 262:	85 0f       	add	r24, r21
 264:	81 83       	std	Z+1, r24	; 0x01
 266:	10 82       	st	Z, r1
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	8c 33       	cpi	r24, 0x3C	; 60
 26c:	e0 f0       	brcs	.+56     	; 0x2a6 <updateRTC+0x88>
 26e:	81 81       	ldd	r24, Z+1	; 0x01
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	21 81       	ldd	r18, Z+1	; 0x01
 274:	39 e8       	ldi	r19, 0x89	; 137
 276:	23 9f       	mul	r18, r19
 278:	21 2d       	mov	r18, r1
 27a:	11 24       	eor	r1, r1
 27c:	22 95       	swap	r18
 27e:	26 95       	lsr	r18
 280:	27 70       	andi	r18, 0x07	; 7
 282:	83 9f       	mul	r24, r19
 284:	81 2d       	mov	r24, r1
 286:	11 24       	eor	r1, r1
 288:	82 95       	swap	r24
 28a:	86 95       	lsr	r24
 28c:	87 70       	andi	r24, 0x07	; 7
 28e:	89 0f       	add	r24, r25
 290:	9c e3       	ldi	r25, 0x3C	; 60
 292:	29 9f       	mul	r18, r25
 294:	80 19       	sub	r24, r0
 296:	11 24       	eor	r1, r1
 298:	82 83       	std	Z+2, r24	; 0x02
 29a:	11 82       	std	Z+1, r1	; 0x01
 29c:	82 81       	ldd	r24, Z+2	; 0x02
 29e:	88 31       	cpi	r24, 0x18	; 24
 2a0:	10 f0       	brcs	.+4      	; 0x2a6 <updateRTC+0x88>
 2a2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end+0x2>
 2a6:	08 95       	ret

000002a8 <EEPROM_write>:

}

void EEPROM_write(uint8_t address, uint8_t data) {
	cli();
 2a8:	f8 94       	cli
	while(EECR & (1 << EEPE)) {}
 2aa:	f9 99       	sbic	0x1f, 1	; 31
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <EEPROM_write+0x2>
	EEARH = 0x00;
 2ae:	12 bc       	out	0x22, r1	; 34
	EEARL = address;
 2b0:	81 bd       	out	0x21, r24	; 33
	EEDR = data;
 2b2:	60 bd       	out	0x20, r22	; 32
	EECR = 0x00;
 2b4:	1f ba       	out	0x1f, r1	; 31
	EECR = (1 << EERIE) | (1 << EEMPE) | (1 << EEPE);
 2b6:	8e e0       	ldi	r24, 0x0E	; 14
 2b8:	8f bb       	out	0x1f, r24	; 31
 2ba:	84 e1       	ldi	r24, 0x14	; 20
 2bc:	81 50       	subi	r24, 0x01	; 1
	for(uint8_t i = 20; i != 0; i--) {} // Delay farlocco per evitare problemi con EEPROM
 2be:	f1 f7       	brne	.-4      	; 0x2bc <EEPROM_write+0x14>
	sei();
 2c0:	78 94       	sei
 2c2:	08 95       	ret

000002c4 <updateEEPROM>:
			}
		}
}
// END

void updateEEPROM() {
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
	EEPROM_write(0x00, Orario.Secondi);
 2c8:	c2 e0       	ldi	r28, 0x02	; 2
 2ca:	d1 e0       	ldi	r29, 0x01	; 1
 2cc:	68 81       	ld	r22, Y
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
	EEPROM_write(0x01, Orario.Minuti);
 2d4:	69 81       	ldd	r22, Y+1	; 0x01
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
	EEPROM_write(0x02, Orario.Ore);
 2dc:	6a 81       	ldd	r22, Y+2	; 0x02
 2de:	82 e0       	ldi	r24, 0x02	; 2
 2e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
	EEPROM_write(0x03, Orario.Giorno);
 2e4:	6b 81       	ldd	r22, Y+3	; 0x03
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
	EEPROM_write(0x04, Orario.Mesi);
 2ec:	6c 81       	ldd	r22, Y+4	; 0x04
 2ee:	84 e0       	ldi	r24, 0x04	; 4
 2f0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
	EEPROM_write(0x05, Orario.Anno);
 2f4:	6d 81       	ldd	r22, Y+5	; 0x05
 2f6:	85 e0       	ldi	r24, 0x05	; 5
 2f8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <EEPROM_write>
}
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <__vector_7>:
	(*(volatile uint8_t*) (0xB3)) |= (0xFA); // Set comparator to 250
	// Counter Millisecondi Timer 2
}

ISR(TIMER2_COMPA_vect) // ISR Timer0 match COMPA, that`s used for counting milli seconds
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	4f 93       	push	r20
 312:	5f 93       	push	r21
 314:	6f 93       	push	r22
 316:	7f 93       	push	r23
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
 31c:	af 93       	push	r26
 31e:	bf 93       	push	r27
 320:	ef 93       	push	r30
 322:	ff 93       	push	r31
  __ms++;
 324:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__ms>
 328:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__ms+0x1>
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__ms+0x1>
 332:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__ms>
  if(__ms >= 1000) { // One second passed
 336:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__ms>
 33a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__ms+0x1>
 33e:	88 3e       	cpi	r24, 0xE8	; 232
 340:	93 40       	sbci	r25, 0x03	; 3
 342:	a0 f1       	brcs	.+104    	; 0x3ac <__vector_7+0xaa>
    __ms -= 1000;
 344:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__ms>
 348:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__ms+0x1>
 34c:	88 5e       	subi	r24, 0xE8	; 232
 34e:	93 40       	sbci	r25, 0x03	; 3
 350:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__ms+0x1>
 354:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__ms>
    __lastTimerSeconds++;
 358:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__lastTimerSeconds>
 35c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__lastTimerSeconds+0x1>
 360:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__lastTimerSeconds+0x2>
 364:	b0 91 11 01 	lds	r27, 0x0111	; 0x800111 <__lastTimerSeconds+0x3>
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	a1 1d       	adc	r26, r1
 36c:	b1 1d       	adc	r27, r1
 36e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__lastTimerSeconds>
 372:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__lastTimerSeconds+0x1>
 376:	a0 93 10 01 	sts	0x0110, r26	; 0x800110 <__lastTimerSeconds+0x2>
 37a:	b0 93 11 01 	sts	0x0111, r27	; 0x800111 <__lastTimerSeconds+0x3>
    if(!lastTimerLedOn) lastTimerLedOn++;
 37e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Timer8+0x1>
 382:	81 11       	cpse	r24, r1
 384:	05 c0       	rjmp	.+10     	; 0x390 <__vector_7+0x8e>
 386:	ea e3       	ldi	r30, 0x3A	; 58
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	81 81       	ldd	r24, Z+1	; 0x01
 38c:	8f 5f       	subi	r24, 0xFF	; 255
 38e:	81 83       	std	Z+1, r24	; 0x01
		refreshEEPROM++; if(refreshEEPROM >= 250) refreshEEPROM = 0; updateEEPROM();
 390:	ea e3       	ldi	r30, 0x3A	; 58
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	82 81       	ldd	r24, Z+2	; 0x02
 396:	8f 5f       	subi	r24, 0xFF	; 255
 398:	82 83       	std	Z+2, r24	; 0x02
 39a:	82 81       	ldd	r24, Z+2	; 0x02
 39c:	8a 3f       	cpi	r24, 0xFA	; 250
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__vector_7+0xa2>
 3a0:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Timer8+0x2>
 3a4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <updateEEPROM>
    updateRTC();
 3a8:	0e 94 0f 01 	call	0x21e	; 0x21e <updateRTC>
  }
  if(startLed) {
 3ac:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <startLed>
 3b0:	88 23       	and	r24, r24
 3b2:	e1 f1       	breq	.+120    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
      delayTimerPWM++;
 3b4:	ea e3       	ldi	r30, 0x3A	; 58
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	80 81       	ld	r24, Z
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
 3bc:	80 83       	st	Z, r24
      if(delayTimerPWM >= tempTimerLed) {
 3be:	90 81       	ld	r25, Z
 3c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3c4:	98 17       	cp	r25, r24
 3c6:	e8 f1       	brcs	.+122    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
        delayTimerPWM = 0;
 3c8:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <Timer8>
        OCR0A = ( Reverse ? (OCR0A - 3) : (OCR0A + 3) );
 3cc:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Reverse>
 3d0:	88 23       	and	r24, r24
 3d2:	19 f0       	breq	.+6      	; 0x3da <__vector_7+0xd8>
 3d4:	87 b5       	in	r24, 0x27	; 39
 3d6:	83 50       	subi	r24, 0x03	; 3
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <__vector_7+0xdc>
 3da:	87 b5       	in	r24, 0x27	; 39
 3dc:	8d 5f       	subi	r24, 0xFD	; 253
 3de:	87 bd       	out	0x27, r24	; 39
        Ocrlast = OCR0A;
 3e0:	87 b5       	in	r24, 0x27	; 39
 3e2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <Ocrlast>
        if(Ocrlast >= 240 && Reverse == 0) { // 225 viene scelto per evitare l'overflow, con valore massimo 255
 3e6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Ocrlast>
 3ea:	80 3f       	cpi	r24, 0xF0	; 240
 3ec:	70 f0       	brcs	.+28     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ee:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Reverse>
 3f2:	81 11       	cpse	r24, r1
 3f4:	0a c0       	rjmp	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
          startLed = 0; Reverse = 1;
 3f6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <startLed>
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Reverse>
          lastTimerLedOn = 1;
 400:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <Timer8+0x1>
          LedOn = 1;
 404:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LedOn>
 408:	1c c0       	rjmp	.+56     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
        } else if(Ocrlast <= 20 && Reverse == 1) {
 40a:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <Ocrlast>
 40e:	85 31       	cpi	r24, 0x15	; 21
 410:	c0 f4       	brcc	.+48     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 412:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Reverse>
 416:	88 23       	and	r24, r24
 418:	a1 f0       	breq	.+40     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
          startLed = 0; Reverse = 0; LedOn = 0; lastTimerLedOn = 0;
 41a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <startLed>
 41e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <Reverse>
 422:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <LedOn>
 426:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <Timer8+0x1>
 42a:	0b c0       	rjmp	.+22     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
        }
      }
  } else {
    if(lastTimerLedOn >= MAXTIMELED) {
 42c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <Timer8+0x1>
 430:	84 31       	cpi	r24, 0x14	; 20
 432:	38 f0       	brcs	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
      lastTimerLedOn = 0; startLed = 1; Reverse = 1;
 434:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <Timer8+0x1>
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <startLed>
 43e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Reverse>
    }
  }
}
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	7f 91       	pop	r23
 450:	6f 91       	pop	r22
 452:	5f 91       	pop	r21
 454:	4f 91       	pop	r20
 456:	3f 91       	pop	r19
 458:	2f 91       	pop	r18
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_5>:

volatile uint8_t lastPIND = 0x00;

ISR(PCINT2_vect) { // INTERRUPT PCINT2
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	2f 93       	push	r18
 470:	8f 93       	push	r24
 472:	9f 93       	push	r25
	uint8_t changedBits = 0x00;
	changedBits = PIND ^ lastPIND; // changedBits ti dice se e quale porta sia cambiata
 474:	99 b1       	in	r25, 0x09	; 9
 476:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <lastPIND>
	lastPIND = PIND; // aggiorna variabile lastPIND
 47a:	29 b1       	in	r18, 0x09	; 9
 47c:	20 93 09 01 	sts	0x0109, r18	; 0x800109 <lastPIND>

	if(changedBits & (1 << 5)) { // Cambiato pin 5
 480:	89 27       	eor	r24, r25
 482:	85 ff       	sbrs	r24, 5
 484:	0c c0       	rjmp	.+24     	; 0x49e <__vector_5+0x3a>
		if(PIND & ( 1 << 5)) { // Pin 5 is HIGH
 486:	4d 9b       	sbis	0x09, 5	; 9
 488:	0a c0       	rjmp	.+20     	; 0x49e <__vector_5+0x3a>
			if(LedOn == 0) {
 48a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LedOn>
 48e:	81 11       	cpse	r24, r1
 490:	04 c0       	rjmp	.+8      	; 0x49a <__vector_5+0x36>
        startLed = 1;
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <startLed>
 498:	02 c0       	rjmp	.+4      	; 0x49e <__vector_5+0x3a>
      } else if(LedOn == 0) {
 49a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LedOn>
      }
		} else { // Pin 5 is LOW
			//
		}
	}
}
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	2f 91       	pop	r18
 4a4:	0f 90       	pop	r0
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	0f 90       	pop	r0
 4aa:	1f 90       	pop	r1
 4ac:	18 95       	reti

000004ae <__vector_17>:
volatile extern _Bool	 bufferSize;
volatile extern uint8_t  Sending;
// Variabili SPI Wireless

ISR(SPI_STC_vect) // ISR SPI finito
{
 4ae:	1f 92       	push	r1
 4b0:	0f 92       	push	r0
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	0f 92       	push	r0
 4b6:	11 24       	eor	r1, r1
 4b8:	2f 93       	push	r18
 4ba:	3f 93       	push	r19
 4bc:	4f 93       	push	r20
 4be:	5f 93       	push	r21
 4c0:	6f 93       	push	r22
 4c2:	7f 93       	push	r23
 4c4:	8f 93       	push	r24
 4c6:	9f 93       	push	r25
 4c8:	af 93       	push	r26
 4ca:	bf 93       	push	r27
 4cc:	ef 93       	push	r30
 4ce:	ff 93       	push	r31
	// Funzioni necessarie per lo SPI
	switch(Sending) {
 4d0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Sending>
 4d4:	83 30       	cpi	r24, 0x03	; 3
 4d6:	18 f0       	brcs	.+6      	; 0x4de <__vector_17+0x30>
 4d8:	83 30       	cpi	r24, 0x03	; 3
 4da:	51 f0       	breq	.+20     	; 0x4f0 <__vector_17+0x42>
 4dc:	13 c0       	rjmp	.+38     	; 0x504 <__vector_17+0x56>
		case 0:
		case 1:
		case 2:
			if(!bufferSize) { // 32 bit
 4de:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <bufferSize>
 4e2:	88 23       	and	r24, r24
 4e4:	29 f0       	breq	.+10     	; 0x4f0 <__vector_17+0x42>

			} else { // 8 bit
				sendoverspi(bufferDataToWrite, 3);
 4e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <bufferDataToWrite>
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	0e 94 04 01 	call	0x208	; 0x208 <sendoverspi>
			}
		case 3: bufferDataToWrite = 0; Sending = 0; toggle_pin(WCSN, 0); // Necessario per interrompere una trasmissione nel chip. // work in progress
 4f0:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <bufferDataToWrite>
 4f4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Sending>
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	70 e0       	ldi	r23, 0x00	; 0
 4fc:	85 e2       	ldi	r24, 0x25	; 37
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 ef 00 	call	0x1de	; 0x1de <toggle_pin>
		;
	}
	Sending = 0;
 504:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Sending>
}
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
